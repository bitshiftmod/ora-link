/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientBareCallParams,
  AppClientCompilationParams,
  AppClientMethodCallParams,
  AppClientParams,
  CallOnComplete,
  CloneAppClientParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryDeployParams, AppFactoryParams, AppFactoryResolveAppClientByCreatorAndNameParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { AppMethodCallTransactionArgument, RawSimulateOptions, SimulateOptions, SkipSignaturesSimulateOptions, TransactionComposer } from '@algorandfoundation/algokit-utils/types/composer'
import { SendAtomicTransactionComposerResults, SendParams } from '@algorandfoundation/algokit-utils/types/transaction'
import { modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"OLink","desc":"","methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"bootstrap","args":[{"name":"oraAsaId","type":"uint64"},{"name":"customLinkPrice","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updateCustomLinkCost","args":[{"name":"asaId","type":"uint64"},{"name":"newCost","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"updateApplication","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["UpdateApplication"]}},{"name":"deleteApplication","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]}},{"name":"resolveShortcode","readonly":true,"args":[{"name":"shortcode","type":"string"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]}},{"name":"findShortcode","readonly":true,"args":[{"name":"url","type":"string"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]}},{"name":"createShortcode","desc":"Called to generate a shortcode for a URL.","args":[{"name":"mbrPayment","type":"pay"},{"name":"url","type":"string"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]}},{"name":"createCustomShortcode","desc":"Called to generate a shortcode for a URL.","args":[{"name":"mbrPayment","type":"pay"},{"name":"oraPayment","type":"axfer"},{"name":"shortcode","type":"string"},{"name":"url","type":"string"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]}},{"name":"withdraw","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":1,"ints":2},"local":{"bytes":0,"ints":0}},"keys":{"global":{"manager":{"key":"bWFuYWdlcg==","keyType":"AVMBytes","valueType":"address"},"oraAsaId":{"key":"b3JhQXNhSWQ=","keyType":"AVMBytes","valueType":"uint64"},"customLinkPrice":{"key":"bGlua1ByaWNl","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"linkMap":{"keyType":"string","valueType":"string"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/OLink.algo.ts:3","pc":[0]},{"teal":2,"source":"contracts/OLink.algo.ts:3","pc":[1,2,3,4,5,6,7,8,9,10,11]},{"teal":3,"source":"contracts/OLink.algo.ts:3","pc":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109]},{"teal":15,"source":"contracts/OLink.algo.ts:3","pc":[110,111]},{"teal":16,"source":"contracts/OLink.algo.ts:3","pc":[112]},{"teal":17,"source":"contracts/OLink.algo.ts:3","pc":[113,114]},{"teal":18,"source":"contracts/OLink.algo.ts:3","pc":[115]},{"teal":19,"source":"contracts/OLink.algo.ts:3","pc":[116,117]},{"teal":20,"source":"contracts/OLink.algo.ts:3","pc":[118]},{"teal":21,"source":"contracts/OLink.algo.ts:3","pc":[119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144]},{"teal":25,"source":"contracts/OLink.algo.ts:3","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[145]},{"teal":30,"source":"contracts/OLink.algo.ts:12","pc":[146,147,148]},{"teal":31,"source":"contracts/OLink.algo.ts:12","pc":[149]},{"teal":32,"source":"contracts/OLink.algo.ts:12","pc":[150]},{"teal":36,"source":"contracts/OLink.algo.ts:12","pc":[151,152,153]},{"teal":40,"source":"contracts/OLink.algo.ts:14","pc":[154]},{"teal":41,"source":"contracts/OLink.algo.ts:14","pc":[155,156]},{"teal":42,"source":"contracts/OLink.algo.ts:14","pc":[157]},{"teal":43,"source":"contracts/OLink.algo.ts:12","pc":[158]},{"teal":48,"source":"contracts/OLink.algo.ts:17","pc":[159,160,161]},{"teal":49,"source":"contracts/OLink.algo.ts:17","pc":[162]},{"teal":52,"source":"contracts/OLink.algo.ts:17","pc":[163,164,165]},{"teal":53,"source":"contracts/OLink.algo.ts:17","pc":[166]},{"teal":56,"source":"contracts/OLink.algo.ts:17","pc":[167,168,169]},{"teal":57,"source":"contracts/OLink.algo.ts:17","pc":[170]},{"teal":58,"source":"contracts/OLink.algo.ts:17","pc":[171]},{"teal":62,"source":"contracts/OLink.algo.ts:17","pc":[172,173,174]},{"teal":66,"source":"contracts/OLink.algo.ts:18","pc":[175]},{"teal":67,"source":"contracts/OLink.algo.ts:18","pc":[176]},{"teal":68,"source":"contracts/OLink.algo.ts:18","pc":[177]},{"teal":69,"source":"contracts/OLink.algo.ts:18","pc":[178]},{"teal":72,"source":"contracts/OLink.algo.ts:18","errorMessage":"Already bootstrapped","pc":[179]},{"teal":76,"source":"contracts/OLink.algo.ts:19","pc":[180,181]},{"teal":77,"source":"contracts/OLink.algo.ts:19","pc":[182]},{"teal":78,"source":"contracts/OLink.algo.ts:19","pc":[183]},{"teal":81,"source":"contracts/OLink.algo.ts:19","errorMessage":"ASA must be non-zero","pc":[184]},{"teal":86,"source":"contracts/OLink.algo.ts:20","pc":[185,186]},{"teal":87,"source":"contracts/OLink.algo.ts:20","pc":[187]},{"teal":88,"source":"contracts/OLink.algo.ts:20","pc":[188]},{"teal":89,"source":"contracts/OLink.algo.ts:20","pc":[189]},{"teal":92,"source":"contracts/OLink.algo.ts:20","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.manager.value\"}","pc":[190]},{"teal":96,"source":"contracts/OLink.algo.ts:22","pc":[191]},{"teal":97,"source":"contracts/OLink.algo.ts:22","pc":[192,193]},{"teal":98,"source":"contracts/OLink.algo.ts:22","pc":[194]},{"teal":102,"source":"contracts/OLink.algo.ts:23","pc":[195,196]},{"teal":103,"source":"contracts/OLink.algo.ts:23","pc":[197,198]},{"teal":104,"source":"contracts/OLink.algo.ts:23","pc":[199]},{"teal":112,"source":"contracts/OLink.algo.ts:26","pc":[200]},{"teal":113,"source":"contracts/OLink.algo.ts:26","pc":[201]},{"teal":114,"source":"contracts/OLink.algo.ts:26","pc":[202,203]},{"teal":118,"source":"contracts/OLink.algo.ts:27","pc":[204,205]},{"teal":119,"source":"contracts/OLink.algo.ts:27","pc":[206,207]},{"teal":123,"source":"contracts/OLink.algo.ts:28","pc":[208]},{"teal":124,"source":"contracts/OLink.algo.ts:28","pc":[209,210]},{"teal":128,"source":"contracts/OLink.algo.ts:29","pc":[211,212]},{"teal":129,"source":"contracts/OLink.algo.ts:29","pc":[213,214]},{"teal":132,"source":"contracts/OLink.algo.ts:26","pc":[215]},{"teal":133,"source":"contracts/OLink.algo.ts:26","pc":[216,217]},{"teal":136,"source":"contracts/OLink.algo.ts:26","pc":[218]},{"teal":137,"source":"contracts/OLink.algo.ts:17","pc":[219]},{"teal":142,"source":"contracts/OLink.algo.ts:33","pc":[220,221,222]},{"teal":143,"source":"contracts/OLink.algo.ts:33","pc":[223]},{"teal":146,"source":"contracts/OLink.algo.ts:33","pc":[224,225,226]},{"teal":147,"source":"contracts/OLink.algo.ts:33","pc":[227]},{"teal":150,"source":"contracts/OLink.algo.ts:33","pc":[228,229,230]},{"teal":151,"source":"contracts/OLink.algo.ts:33","pc":[231]},{"teal":152,"source":"contracts/OLink.algo.ts:33","pc":[232]},{"teal":156,"source":"contracts/OLink.algo.ts:33","pc":[233,234,235]},{"teal":161,"source":"contracts/OLink.algo.ts:34","pc":[236,237]},{"teal":162,"source":"contracts/OLink.algo.ts:34","pc":[238]},{"teal":163,"source":"contracts/OLink.algo.ts:34","pc":[239]},{"teal":164,"source":"contracts/OLink.algo.ts:34","pc":[240]},{"teal":167,"source":"contracts/OLink.algo.ts:34","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.manager.value\"}","pc":[241]},{"teal":171,"source":"contracts/OLink.algo.ts:35","pc":[242,243]},{"teal":172,"source":"contracts/OLink.algo.ts:35","pc":[244]},{"teal":173,"source":"contracts/OLink.algo.ts:35","pc":[245]},{"teal":176,"source":"contracts/OLink.algo.ts:35","errorMessage":"ASA ID must be non-zero","pc":[246]},{"teal":180,"source":"contracts/OLink.algo.ts:36","pc":[247,248]},{"teal":181,"source":"contracts/OLink.algo.ts:36","pc":[249]},{"teal":182,"source":"contracts/OLink.algo.ts:36","pc":[250]},{"teal":185,"source":"contracts/OLink.algo.ts:36","errorMessage":"New cost must be non-zero","pc":[251]},{"teal":189,"source":"contracts/OLink.algo.ts:38","pc":[252]},{"teal":190,"source":"contracts/OLink.algo.ts:38","pc":[253,254]},{"teal":191,"source":"contracts/OLink.algo.ts:38","pc":[255]},{"teal":195,"source":"contracts/OLink.algo.ts:39","pc":[256,257]},{"teal":196,"source":"contracts/OLink.algo.ts:39","pc":[258,259]},{"teal":197,"source":"contracts/OLink.algo.ts:39","pc":[260]},{"teal":205,"source":"contracts/OLink.algo.ts:42","pc":[261]},{"teal":206,"source":"contracts/OLink.algo.ts:42","pc":[262]},{"teal":207,"source":"contracts/OLink.algo.ts:42","pc":[263,264]},{"teal":211,"source":"contracts/OLink.algo.ts:43","pc":[265,266]},{"teal":212,"source":"contracts/OLink.algo.ts:43","pc":[267,268]},{"teal":216,"source":"contracts/OLink.algo.ts:44","pc":[269]},{"teal":217,"source":"contracts/OLink.algo.ts:44","pc":[270,271]},{"teal":221,"source":"contracts/OLink.algo.ts:45","pc":[272,273]},{"teal":222,"source":"contracts/OLink.algo.ts:45","pc":[274,275]},{"teal":225,"source":"contracts/OLink.algo.ts:42","pc":[276]},{"teal":226,"source":"contracts/OLink.algo.ts:42","pc":[277,278]},{"teal":229,"source":"contracts/OLink.algo.ts:42","pc":[279]},{"teal":230,"source":"contracts/OLink.algo.ts:33","pc":[280]},{"teal":235,"source":"contracts/OLink.algo.ts:49","pc":[281,282,283]},{"teal":236,"source":"contracts/OLink.algo.ts:49","pc":[284]},{"teal":237,"source":"contracts/OLink.algo.ts:49","pc":[285]},{"teal":241,"source":"contracts/OLink.algo.ts:49","pc":[286,287,288]},{"teal":246,"source":"contracts/OLink.algo.ts:51","pc":[289,290]},{"teal":247,"source":"contracts/OLink.algo.ts:51","pc":[291]},{"teal":248,"source":"contracts/OLink.algo.ts:51","pc":[292]},{"teal":249,"source":"contracts/OLink.algo.ts:51","pc":[293]},{"teal":252,"source":"contracts/OLink.algo.ts:51","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.manager.value\"}","pc":[294]},{"teal":253,"source":"contracts/OLink.algo.ts:49","pc":[295]},{"teal":258,"source":"contracts/OLink.algo.ts:54","pc":[296,297,298]},{"teal":259,"source":"contracts/OLink.algo.ts:54","pc":[299]},{"teal":260,"source":"contracts/OLink.algo.ts:54","pc":[300]},{"teal":264,"source":"contracts/OLink.algo.ts:54","pc":[301,302,303]},{"teal":269,"source":"contracts/OLink.algo.ts:56","pc":[304,305]},{"teal":270,"source":"contracts/OLink.algo.ts:56","pc":[306]},{"teal":271,"source":"contracts/OLink.algo.ts:56","pc":[307]},{"teal":272,"source":"contracts/OLink.algo.ts:56","pc":[308]},{"teal":275,"source":"contracts/OLink.algo.ts:56","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.manager.value\"}","pc":[309]},{"teal":276,"source":"contracts/OLink.algo.ts:54","pc":[310]},{"teal":281,"source":"contracts/OLink.algo.ts:59","pc":[311]},{"teal":284,"source":"contracts/OLink.algo.ts:60","pc":[312,313,314]},{"teal":285,"source":"contracts/OLink.algo.ts:60","pc":[315,316,317]},{"teal":288,"source":"contracts/OLink.algo.ts:59","pc":[318,319,320]},{"teal":289,"source":"contracts/OLink.algo.ts:59","pc":[321]},{"teal":290,"source":"contracts/OLink.algo.ts:59","pc":[322]},{"teal":291,"source":"contracts/OLink.algo.ts:59","pc":[323]},{"teal":292,"source":"contracts/OLink.algo.ts:59","pc":[324,325,326]},{"teal":293,"source":"contracts/OLink.algo.ts:59","pc":[327]},{"teal":294,"source":"contracts/OLink.algo.ts:59","pc":[328]},{"teal":295,"source":"contracts/OLink.algo.ts:59","pc":[329]},{"teal":296,"source":"contracts/OLink.algo.ts:59","pc":[330]},{"teal":297,"source":"contracts/OLink.algo.ts:59","pc":[331]},{"teal":298,"source":"contracts/OLink.algo.ts:59","pc":[332]},{"teal":302,"source":"contracts/OLink.algo.ts:59","pc":[333,334,335]},{"teal":306,"source":"contracts/OLink.algo.ts:61","pc":[336,337]},{"teal":307,"source":"contracts/OLink.algo.ts:61","pc":[338]},{"teal":308,"source":"contracts/OLink.algo.ts:61","pc":[339]},{"teal":309,"source":"contracts/OLink.algo.ts:61","pc":[340]},{"teal":310,"source":"contracts/OLink.algo.ts:61","pc":[341,342,343]},{"teal":311,"source":"contracts/OLink.algo.ts:61","pc":[344]},{"teal":312,"source":"contracts/OLink.algo.ts:61","pc":[345]},{"teal":313,"source":"contracts/OLink.algo.ts:61","pc":[346]},{"teal":314,"source":"contracts/OLink.algo.ts:61","pc":[347]},{"teal":315,"source":"contracts/OLink.algo.ts:61","pc":[348]},{"teal":318,"source":"contracts/OLink.algo.ts:61","errorMessage":"Shortcode does not exist","pc":[349]},{"teal":322,"source":"contracts/OLink.algo.ts:62","pc":[350,351]},{"teal":323,"source":"contracts/OLink.algo.ts:62","pc":[352]},{"teal":324,"source":"contracts/OLink.algo.ts:62","pc":[353]},{"teal":325,"source":"contracts/OLink.algo.ts:62","pc":[354]},{"teal":326,"source":"contracts/OLink.algo.ts:62","pc":[355,356,357]},{"teal":327,"source":"contracts/OLink.algo.ts:62","pc":[358]},{"teal":328,"source":"contracts/OLink.algo.ts:62","pc":[359]},{"teal":329,"source":"contracts/OLink.algo.ts:62","pc":[360]},{"teal":332,"source":"contracts/OLink.algo.ts:62","errorMessage":"box value does not exist: this.linkMap(shortcode).value","pc":[361]},{"teal":333,"source":"contracts/OLink.algo.ts:62","pc":[362,363,364]},{"teal":334,"source":"contracts/OLink.algo.ts:59","pc":[365]},{"teal":339,"source":"contracts/OLink.algo.ts:65","pc":[366]},{"teal":342,"source":"contracts/OLink.algo.ts:66","pc":[367,368,369]},{"teal":343,"source":"contracts/OLink.algo.ts:66","pc":[370,371,372]},{"teal":346,"source":"contracts/OLink.algo.ts:65","pc":[373,374,375]},{"teal":347,"source":"contracts/OLink.algo.ts:65","pc":[376]},{"teal":348,"source":"contracts/OLink.algo.ts:65","pc":[377]},{"teal":349,"source":"contracts/OLink.algo.ts:65","pc":[378]},{"teal":350,"source":"contracts/OLink.algo.ts:65","pc":[379,380,381]},{"teal":351,"source":"contracts/OLink.algo.ts:65","pc":[382]},{"teal":352,"source":"contracts/OLink.algo.ts:65","pc":[383]},{"teal":353,"source":"contracts/OLink.algo.ts:65","pc":[384]},{"teal":354,"source":"contracts/OLink.algo.ts:65","pc":[385]},{"teal":355,"source":"contracts/OLink.algo.ts:65","pc":[386]},{"teal":356,"source":"contracts/OLink.algo.ts:65","pc":[387]},{"teal":360,"source":"contracts/OLink.algo.ts:65","pc":[388,389,390]},{"teal":363,"source":"contracts/OLink.algo.ts:65","pc":[391]},{"teal":364,"source":"contracts/OLink.algo.ts:65","pc":[392,393]},{"teal":368,"source":"contracts/OLink.algo.ts:67","pc":[394,395]},{"teal":369,"source":"contracts/OLink.algo.ts:67","pc":[396]},{"teal":370,"source":"contracts/OLink.algo.ts:67","pc":[397,398]},{"teal":374,"source":"contracts/OLink.algo.ts:69","pc":[399]},{"teal":375,"source":"contracts/OLink.algo.ts:69","pc":[400,401]},{"teal":380,"source":"contracts/OLink.algo.ts:69","pc":[402,403]},{"teal":381,"source":"contracts/OLink.algo.ts:69","pc":[404,405]},{"teal":382,"source":"contracts/OLink.algo.ts:69","pc":[406]},{"teal":383,"source":"contracts/OLink.algo.ts:69","pc":[407,408,409]},{"teal":387,"source":"contracts/OLink.algo.ts:70","pc":[410,411]},{"teal":388,"source":"contracts/OLink.algo.ts:70","pc":[412,413]},{"teal":389,"source":"contracts/OLink.algo.ts:70","pc":[414,415,416]},{"teal":390,"source":"contracts/OLink.algo.ts:70","pc":[417,418]},{"teal":395,"source":"contracts/OLink.algo.ts:71","pc":[419,420]},{"teal":396,"source":"contracts/OLink.algo.ts:71","pc":[421]},{"teal":397,"source":"contracts/OLink.algo.ts:71","pc":[422]},{"teal":398,"source":"contracts/OLink.algo.ts:71","pc":[423]},{"teal":399,"source":"contracts/OLink.algo.ts:71","pc":[424,425,426]},{"teal":400,"source":"contracts/OLink.algo.ts:71","pc":[427]},{"teal":401,"source":"contracts/OLink.algo.ts:71","pc":[428]},{"teal":402,"source":"contracts/OLink.algo.ts:71","pc":[429]},{"teal":403,"source":"contracts/OLink.algo.ts:71","pc":[430]},{"teal":404,"source":"contracts/OLink.algo.ts:71","pc":[431]},{"teal":405,"source":"contracts/OLink.algo.ts:71","pc":[432,433,434]},{"teal":411,"source":"contracts/OLink.algo.ts:72","pc":[435,436]},{"teal":412,"source":"contracts/OLink.algo.ts:72","pc":[437]},{"teal":413,"source":"contracts/OLink.algo.ts:72","pc":[438]},{"teal":414,"source":"contracts/OLink.algo.ts:72","pc":[439]},{"teal":415,"source":"contracts/OLink.algo.ts:72","pc":[440,441,442]},{"teal":416,"source":"contracts/OLink.algo.ts:72","pc":[443]},{"teal":417,"source":"contracts/OLink.algo.ts:72","pc":[444]},{"teal":418,"source":"contracts/OLink.algo.ts:72","pc":[445]},{"teal":421,"source":"contracts/OLink.algo.ts:72","errorMessage":"box value does not exist: this.linkMap(shortcode).value","pc":[446]},{"teal":422,"source":"contracts/OLink.algo.ts:72","pc":[447,448,449]},{"teal":423,"source":"contracts/OLink.algo.ts:72","pc":[450,451]},{"teal":424,"source":"contracts/OLink.algo.ts:72","pc":[452]},{"teal":425,"source":"contracts/OLink.algo.ts:72","pc":[453,454,455]},{"teal":430,"source":"contracts/OLink.algo.ts:73","pc":[456,457]},{"teal":431,"source":"contracts/OLink.algo.ts:73","pc":[458,459,460]},{"teal":434,"source":"contracts/OLink.algo.ts:71","pc":[461,462,463]},{"teal":439,"source":"contracts/OLink.algo.ts:76","pc":[464]},{"teal":442,"source":"contracts/OLink.algo.ts:76","errorMessage":"Shortcode does not exist","pc":[465]},{"teal":449,"source":"contracts/OLink.algo.ts:69","pc":[466,467]},{"teal":450,"source":"contracts/OLink.algo.ts:69","pc":[468]},{"teal":451,"source":"contracts/OLink.algo.ts:69","pc":[469]},{"teal":452,"source":"contracts/OLink.algo.ts:69","pc":[470,471]},{"teal":453,"source":"contracts/OLink.algo.ts:69","pc":[472,473,474]},{"teal":458,"source":"contracts/OLink.algo.ts:79","pc":[475]},{"teal":462,"source":"contracts/OLink.algo.ts:65","pc":[476,477]},{"teal":465,"source":"contracts/OLink.algo.ts:65","pc":[478,479]},{"teal":466,"source":"contracts/OLink.algo.ts:65","pc":[480]},{"teal":470,"source":"contracts/OLink.algo.ts:82","pc":[481,482,483]},{"teal":473,"source":"contracts/OLink.algo.ts:82","pc":[484]},{"teal":474,"source":"contracts/OLink.algo.ts:82","pc":[485,486]},{"teal":478,"source":"contracts/OLink.algo.ts:85","pc":[487]},{"teal":479,"source":"contracts/OLink.algo.ts:85","pc":[488,489]},{"teal":483,"source":"contracts/OLink.algo.ts:87","pc":[490,491]},{"teal":484,"source":"contracts/OLink.algo.ts:87","pc":[492,493]},{"teal":489,"source":"contracts/OLink.algo.ts:87","pc":[494,495]},{"teal":490,"source":"contracts/OLink.algo.ts:87","pc":[496,497]},{"teal":491,"source":"contracts/OLink.algo.ts:87","pc":[498,499]},{"teal":492,"source":"contracts/OLink.algo.ts:87","pc":[500]},{"teal":493,"source":"contracts/OLink.algo.ts:87","pc":[501]},{"teal":494,"source":"contracts/OLink.algo.ts:87","pc":[502,503,504]},{"teal":498,"source":"contracts/OLink.algo.ts:88","pc":[505,506]},{"teal":499,"source":"contracts/OLink.algo.ts:88","pc":[507,508]},{"teal":500,"source":"contracts/OLink.algo.ts:88","pc":[509]},{"teal":501,"source":"contracts/OLink.algo.ts:88","pc":[510,511]},{"teal":502,"source":"contracts/OLink.algo.ts:88","pc":[512]},{"teal":503,"source":"contracts/OLink.algo.ts:88","pc":[513]},{"teal":504,"source":"contracts/OLink.algo.ts:88","pc":[514,515]},{"teal":508,"source":"contracts/OLink.algo.ts:89","pc":[516,517]},{"teal":509,"source":"contracts/OLink.algo.ts:89","pc":[518,519]},{"teal":510,"source":"contracts/OLink.algo.ts:89","pc":[520,521]},{"teal":511,"source":"contracts/OLink.algo.ts:89","pc":[522]},{"teal":512,"source":"contracts/OLink.algo.ts:89","pc":[523]},{"teal":513,"source":"contracts/OLink.algo.ts:89","pc":[524]},{"teal":514,"source":"contracts/OLink.algo.ts:89","pc":[525,526]},{"teal":519,"source":"contracts/OLink.algo.ts:87","pc":[527,528]},{"teal":520,"source":"contracts/OLink.algo.ts:87","pc":[529]},{"teal":521,"source":"contracts/OLink.algo.ts:87","pc":[530]},{"teal":522,"source":"contracts/OLink.algo.ts:87","pc":[531,532]},{"teal":523,"source":"contracts/OLink.algo.ts:87","pc":[533,534,535]},{"teal":528,"source":"contracts/OLink.algo.ts:91","pc":[536,537]},{"teal":531,"source":"contracts/OLink.algo.ts:82","pc":[538,539]},{"teal":534,"source":"contracts/OLink.algo.ts:82","pc":[540,541]},{"teal":535,"source":"contracts/OLink.algo.ts:82","pc":[542]},{"teal":540,"source":"contracts/OLink.algo.ts:95","pc":[543]},{"teal":543,"source":"contracts/OLink.algo.ts:95","pc":[544,545,546]},{"teal":544,"source":"contracts/OLink.algo.ts:95","pc":[547,548,549]},{"teal":547,"source":"contracts/OLink.algo.ts:95","pc":[550,551]},{"teal":548,"source":"contracts/OLink.algo.ts:95","pc":[552]},{"teal":549,"source":"contracts/OLink.algo.ts:95","pc":[553]},{"teal":550,"source":"contracts/OLink.algo.ts:95","pc":[554]},{"teal":551,"source":"contracts/OLink.algo.ts:95","pc":[555,556]},{"teal":552,"source":"contracts/OLink.algo.ts:95","pc":[557]},{"teal":553,"source":"contracts/OLink.algo.ts:95","pc":[558]},{"teal":556,"source":"contracts/OLink.algo.ts:95","errorMessage":"argument 1 (mbrPayment) for createShortcode must be a pay transaction","pc":[559]},{"teal":559,"source":"contracts/OLink.algo.ts:95","pc":[560,561,562]},{"teal":560,"source":"contracts/OLink.algo.ts:95","pc":[563]},{"teal":561,"source":"contracts/OLink.algo.ts:95","pc":[564]},{"teal":562,"source":"contracts/OLink.algo.ts:95","pc":[565]},{"teal":563,"source":"contracts/OLink.algo.ts:95","pc":[566,567,568]},{"teal":564,"source":"contracts/OLink.algo.ts:95","pc":[569]},{"teal":565,"source":"contracts/OLink.algo.ts:95","pc":[570]},{"teal":566,"source":"contracts/OLink.algo.ts:95","pc":[571]},{"teal":567,"source":"contracts/OLink.algo.ts:95","pc":[572]},{"teal":568,"source":"contracts/OLink.algo.ts:95","pc":[573]},{"teal":569,"source":"contracts/OLink.algo.ts:95","pc":[574]},{"teal":575,"source":"contracts/OLink.algo.ts:95","pc":[575,576,577]},{"teal":578,"source":"contracts/OLink.algo.ts:95","pc":[578]},{"teal":579,"source":"contracts/OLink.algo.ts:95","pc":[579,580]},{"teal":583,"source":"contracts/OLink.algo.ts:96","pc":[581,582]},{"teal":584,"source":"contracts/OLink.algo.ts:96","pc":[583]},{"teal":585,"source":"contracts/OLink.algo.ts:96","pc":[584,585]},{"teal":586,"source":"contracts/OLink.algo.ts:96","pc":[586]},{"teal":587,"source":"contracts/OLink.algo.ts:96","pc":[587,588]},{"teal":588,"source":"contracts/OLink.algo.ts:96","pc":[589]},{"teal":589,"source":"contracts/OLink.algo.ts:96","pc":[590]},{"teal":590,"source":"contracts/OLink.algo.ts:96","pc":[591]},{"teal":591,"source":"contracts/OLink.algo.ts:96","pc":[592,593]},{"teal":595,"source":"contracts/OLink.algo.ts:98","pc":[594,595]},{"teal":596,"source":"contracts/OLink.algo.ts:98","pc":[596,597]},{"teal":597,"source":"contracts/OLink.algo.ts:98","pc":[598,599]},{"teal":598,"source":"contracts/OLink.algo.ts:98","pc":[600]},{"teal":601,"source":"contracts/OLink.algo.ts:98","errorMessage":"MBR Payment not sent to app address","pc":[601]},{"teal":605,"source":"contracts/OLink.algo.ts:99","pc":[602,603]},{"teal":606,"source":"contracts/OLink.algo.ts:99","pc":[604,605]},{"teal":607,"source":"contracts/OLink.algo.ts:99","pc":[606,607]},{"teal":608,"source":"contracts/OLink.algo.ts:99","pc":[608]},{"teal":611,"source":"contracts/OLink.algo.ts:99","errorMessage":"Incorrect payment amount","pc":[609]},{"teal":615,"source":"contracts/OLink.algo.ts:101","pc":[610,611]},{"teal":616,"source":"contracts/OLink.algo.ts:101","pc":[612]},{"teal":617,"source":"contracts/OLink.algo.ts:101","pc":[613,614]},{"teal":621,"source":"contracts/OLink.algo.ts:103","pc":[615]},{"teal":622,"source":"contracts/OLink.algo.ts:103","pc":[616,617]},{"teal":627,"source":"contracts/OLink.algo.ts:103","pc":[618,619]},{"teal":628,"source":"contracts/OLink.algo.ts:103","pc":[620,621]},{"teal":629,"source":"contracts/OLink.algo.ts:103","pc":[622]},{"teal":630,"source":"contracts/OLink.algo.ts:103","pc":[623,624,625]},{"teal":634,"source":"contracts/OLink.algo.ts:104","pc":[626,627]},{"teal":635,"source":"contracts/OLink.algo.ts:104","pc":[628,629]},{"teal":636,"source":"contracts/OLink.algo.ts:104","pc":[630,631,632]},{"teal":637,"source":"contracts/OLink.algo.ts:104","pc":[633,634]},{"teal":642,"source":"contracts/OLink.algo.ts:105","pc":[635,636]},{"teal":643,"source":"contracts/OLink.algo.ts:105","pc":[637]},{"teal":644,"source":"contracts/OLink.algo.ts:105","pc":[638]},{"teal":645,"source":"contracts/OLink.algo.ts:105","pc":[639]},{"teal":646,"source":"contracts/OLink.algo.ts:105","pc":[640,641,642]},{"teal":647,"source":"contracts/OLink.algo.ts:105","pc":[643]},{"teal":648,"source":"contracts/OLink.algo.ts:105","pc":[644]},{"teal":649,"source":"contracts/OLink.algo.ts:105","pc":[645]},{"teal":650,"source":"contracts/OLink.algo.ts:105","pc":[646]},{"teal":651,"source":"contracts/OLink.algo.ts:105","pc":[647]},{"teal":652,"source":"contracts/OLink.algo.ts:105","pc":[648,649,650]},{"teal":658,"source":"contracts/OLink.algo.ts:106","pc":[651,652]},{"teal":659,"source":"contracts/OLink.algo.ts:106","pc":[653]},{"teal":660,"source":"contracts/OLink.algo.ts:106","pc":[654]},{"teal":661,"source":"contracts/OLink.algo.ts:106","pc":[655]},{"teal":662,"source":"contracts/OLink.algo.ts:106","pc":[656,657,658]},{"teal":663,"source":"contracts/OLink.algo.ts:106","pc":[659]},{"teal":664,"source":"contracts/OLink.algo.ts:106","pc":[660]},{"teal":665,"source":"contracts/OLink.algo.ts:106","pc":[661]},{"teal":668,"source":"contracts/OLink.algo.ts:106","errorMessage":"box value does not exist: this.linkMap(shortcode).value","pc":[662]},{"teal":669,"source":"contracts/OLink.algo.ts:106","pc":[663,664,665]},{"teal":670,"source":"contracts/OLink.algo.ts:106","pc":[666,667]},{"teal":671,"source":"contracts/OLink.algo.ts:106","pc":[668]},{"teal":672,"source":"contracts/OLink.algo.ts:106","pc":[669,670,671]},{"teal":677,"source":"contracts/OLink.algo.ts:107","pc":[672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699]},{"teal":678,"source":"contracts/OLink.algo.ts:107","pc":[700,701]},{"teal":679,"source":"contracts/OLink.algo.ts:107","pc":[702]},{"teal":680,"source":"contracts/OLink.algo.ts:107","pc":[703,704]},{"teal":684,"source":"contracts/OLink.algo.ts:108","pc":[705]},{"teal":685,"source":"contracts/OLink.algo.ts:108","pc":[706]},{"teal":688,"source":"contracts/OLink.algo.ts:105","pc":[707,708,709]},{"teal":693,"source":"contracts/OLink.algo.ts:111","pc":[710,711]},{"teal":694,"source":"contracts/OLink.algo.ts:111","pc":[712]},{"teal":695,"source":"contracts/OLink.algo.ts:111","pc":[713]},{"teal":696,"source":"contracts/OLink.algo.ts:111","pc":[714]},{"teal":697,"source":"contracts/OLink.algo.ts:111","pc":[715,716,717]},{"teal":698,"source":"contracts/OLink.algo.ts:111","pc":[718]},{"teal":699,"source":"contracts/OLink.algo.ts:111","pc":[719]},{"teal":700,"source":"contracts/OLink.algo.ts:111","pc":[720]},{"teal":701,"source":"contracts/OLink.algo.ts:111","pc":[721]},{"teal":702,"source":"contracts/OLink.algo.ts:111","pc":[722]},{"teal":703,"source":"contracts/OLink.algo.ts:111","pc":[723,724]},{"teal":704,"source":"contracts/OLink.algo.ts:111","pc":[725]},{"teal":705,"source":"contracts/OLink.algo.ts:111","pc":[726]},{"teal":706,"source":"contracts/OLink.algo.ts:111","pc":[727]},{"teal":707,"source":"contracts/OLink.algo.ts:111","pc":[728,729,730]},{"teal":708,"source":"contracts/OLink.algo.ts:111","pc":[731]},{"teal":709,"source":"contracts/OLink.algo.ts:111","pc":[732]},{"teal":710,"source":"contracts/OLink.algo.ts:111","pc":[733]},{"teal":714,"source":"contracts/OLink.algo.ts:112","pc":[734,735]},{"teal":715,"source":"contracts/OLink.algo.ts:112","pc":[736,737,738]},{"teal":722,"source":"contracts/OLink.algo.ts:103","pc":[739,740]},{"teal":723,"source":"contracts/OLink.algo.ts:103","pc":[741]},{"teal":724,"source":"contracts/OLink.algo.ts:103","pc":[742]},{"teal":725,"source":"contracts/OLink.algo.ts:103","pc":[743,744]},{"teal":726,"source":"contracts/OLink.algo.ts:103","pc":[745,746,747]},{"teal":731,"source":"contracts/OLink.algo.ts:116","pc":[748]},{"teal":734,"source":"contracts/OLink.algo.ts:116","errorMessage":"Failed to create shortcode","pc":[749]},{"teal":738,"source":"contracts/OLink.algo.ts:117","pc":[750]},{"teal":742,"source":"contracts/OLink.algo.ts:95","pc":[751,752]},{"teal":745,"source":"contracts/OLink.algo.ts:95","pc":[753,754]},{"teal":746,"source":"contracts/OLink.algo.ts:95","pc":[755]},{"teal":751,"source":"contracts/OLink.algo.ts:121","pc":[756]},{"teal":754,"source":"contracts/OLink.algo.ts:121","pc":[757,758,759]},{"teal":755,"source":"contracts/OLink.algo.ts:121","pc":[760,761,762]},{"teal":758,"source":"contracts/OLink.algo.ts:121","pc":[763,764,765]},{"teal":759,"source":"contracts/OLink.algo.ts:121","pc":[766,767,768]},{"teal":762,"source":"contracts/OLink.algo.ts:121","pc":[769,770]},{"teal":763,"source":"contracts/OLink.algo.ts:121","pc":[771]},{"teal":764,"source":"contracts/OLink.algo.ts:121","pc":[772]},{"teal":765,"source":"contracts/OLink.algo.ts:121","pc":[773]},{"teal":766,"source":"contracts/OLink.algo.ts:121","pc":[774,775]},{"teal":767,"source":"contracts/OLink.algo.ts:121","pc":[776]},{"teal":768,"source":"contracts/OLink.algo.ts:121","pc":[777]},{"teal":771,"source":"contracts/OLink.algo.ts:121","errorMessage":"argument 2 (oraPayment) for createCustomShortcode must be a axfer transaction","pc":[778]},{"teal":774,"source":"contracts/OLink.algo.ts:121","pc":[779,780]},{"teal":775,"source":"contracts/OLink.algo.ts:121","pc":[781,782]},{"teal":776,"source":"contracts/OLink.algo.ts:121","pc":[783]},{"teal":777,"source":"contracts/OLink.algo.ts:121","pc":[784]},{"teal":778,"source":"contracts/OLink.algo.ts:121","pc":[785,786]},{"teal":779,"source":"contracts/OLink.algo.ts:121","pc":[787]},{"teal":780,"source":"contracts/OLink.algo.ts:121","pc":[788]},{"teal":783,"source":"contracts/OLink.algo.ts:121","errorMessage":"argument 3 (mbrPayment) for createCustomShortcode must be a pay transaction","pc":[789]},{"teal":786,"source":"contracts/OLink.algo.ts:121","pc":[790,791,792]},{"teal":787,"source":"contracts/OLink.algo.ts:121","pc":[793]},{"teal":788,"source":"contracts/OLink.algo.ts:121","pc":[794]},{"teal":789,"source":"contracts/OLink.algo.ts:121","pc":[795]},{"teal":790,"source":"contracts/OLink.algo.ts:121","pc":[796,797,798]},{"teal":791,"source":"contracts/OLink.algo.ts:121","pc":[799]},{"teal":792,"source":"contracts/OLink.algo.ts:121","pc":[800]},{"teal":793,"source":"contracts/OLink.algo.ts:121","pc":[801]},{"teal":794,"source":"contracts/OLink.algo.ts:121","pc":[802]},{"teal":795,"source":"contracts/OLink.algo.ts:121","pc":[803]},{"teal":796,"source":"contracts/OLink.algo.ts:121","pc":[804]},{"teal":802,"source":"contracts/OLink.algo.ts:121","pc":[805,806,807]},{"teal":805,"source":"contracts/OLink.algo.ts:121","pc":[808]},{"teal":809,"source":"contracts/OLink.algo.ts:122","pc":[809,810]},{"teal":810,"source":"contracts/OLink.algo.ts:122","pc":[811]},{"teal":811,"source":"contracts/OLink.algo.ts:122","pc":[812]},{"teal":812,"source":"contracts/OLink.algo.ts:122","pc":[813]},{"teal":813,"source":"contracts/OLink.algo.ts:122","pc":[814,815,816]},{"teal":814,"source":"contracts/OLink.algo.ts:122","pc":[817]},{"teal":815,"source":"contracts/OLink.algo.ts:122","pc":[818]},{"teal":816,"source":"contracts/OLink.algo.ts:122","pc":[819]},{"teal":817,"source":"contracts/OLink.algo.ts:122","pc":[820]},{"teal":818,"source":"contracts/OLink.algo.ts:122","pc":[821]},{"teal":819,"source":"contracts/OLink.algo.ts:122","pc":[822]},{"teal":822,"source":"contracts/OLink.algo.ts:122","errorMessage":"Shortcode already exists","pc":[823]},{"teal":826,"source":"contracts/OLink.algo.ts:124","pc":[824,825]},{"teal":827,"source":"contracts/OLink.algo.ts:124","pc":[826]},{"teal":828,"source":"contracts/OLink.algo.ts:124","pc":[827,828]},{"teal":829,"source":"contracts/OLink.algo.ts:124","pc":[829]},{"teal":830,"source":"contracts/OLink.algo.ts:124","pc":[830,831]},{"teal":831,"source":"contracts/OLink.algo.ts:124","pc":[832]},{"teal":832,"source":"contracts/OLink.algo.ts:124","pc":[833]},{"teal":833,"source":"contracts/OLink.algo.ts:124","pc":[834]},{"teal":834,"source":"contracts/OLink.algo.ts:124","pc":[835]},{"teal":835,"source":"contracts/OLink.algo.ts:124","pc":[836,837]},{"teal":840,"source":"contracts/OLink.algo.ts:126","pc":[838,839]},{"teal":841,"source":"contracts/OLink.algo.ts:126","pc":[840,841]},{"teal":842,"source":"contracts/OLink.algo.ts:126","pc":[842,843]},{"teal":843,"source":"contracts/OLink.algo.ts:126","pc":[844]},{"teal":846,"source":"contracts/OLink.algo.ts:126","errorMessage":"transaction verification failed: {\"txn\":\"mbrPayment\",\"field\":\"receiver\",\"expected\":\"this.app.address\"}","pc":[845]},{"teal":849,"source":"contracts/OLink.algo.ts:126","pc":[846,847]},{"teal":850,"source":"contracts/OLink.algo.ts:126","pc":[848,849]},{"teal":851,"source":"contracts/OLink.algo.ts:126","pc":[850,851]},{"teal":852,"source":"contracts/OLink.algo.ts:126","pc":[852]},{"teal":855,"source":"contracts/OLink.algo.ts:126","errorMessage":"transaction verification failed: {\"txn\":\"mbrPayment\",\"field\":\"amount\",\"expected\":\"mbrPaymentAmount\"}","pc":[853]},{"teal":864,"source":"contracts/OLink.algo.ts:127","pc":[854,855]},{"teal":865,"source":"contracts/OLink.algo.ts:128","pc":[856,857]},{"teal":866,"source":"contracts/OLink.algo.ts:128","pc":[858,859]},{"teal":867,"source":"contracts/OLink.algo.ts:128","pc":[860]},{"teal":870,"source":"contracts/OLink.algo.ts:128","errorMessage":"transaction verification failed: {\"txn\":\"oraPayment\",\"field\":\"assetReceiver\",\"expected\":\"this.app.address\"}","pc":[861]},{"teal":873,"source":"contracts/OLink.algo.ts:127","pc":[862,863]},{"teal":874,"source":"contracts/OLink.algo.ts:129","pc":[864,865]},{"teal":875,"source":"contracts/OLink.algo.ts:129","pc":[866,867]},{"teal":876,"source":"contracts/OLink.algo.ts:129","pc":[868]},{"teal":877,"source":"contracts/OLink.algo.ts:129","pc":[869]},{"teal":880,"source":"contracts/OLink.algo.ts:129","errorMessage":"transaction verification failed: {\"txn\":\"oraPayment\",\"field\":\"assetAmount\",\"expected\":\"this.customLinkPrice.value\"}","pc":[870]},{"teal":883,"source":"contracts/OLink.algo.ts:127","pc":[871,872]},{"teal":884,"source":"contracts/OLink.algo.ts:130","pc":[873,874]},{"teal":885,"source":"contracts/OLink.algo.ts:130","pc":[875]},{"teal":886,"source":"contracts/OLink.algo.ts:130","pc":[876]},{"teal":887,"source":"contracts/OLink.algo.ts:130","pc":[877]},{"teal":890,"source":"contracts/OLink.algo.ts:130","errorMessage":"transaction verification failed: {\"txn\":\"oraPayment\",\"field\":\"xferAsset\",\"expected\":\"this.oraAsaId.value\"}","pc":[878]},{"teal":894,"source":"contracts/OLink.algo.ts:133","pc":[879,880]},{"teal":895,"source":"contracts/OLink.algo.ts:133","pc":[881]},{"teal":896,"source":"contracts/OLink.algo.ts:133","pc":[882]},{"teal":897,"source":"contracts/OLink.algo.ts:133","pc":[883]},{"teal":898,"source":"contracts/OLink.algo.ts:133","pc":[884,885,886]},{"teal":899,"source":"contracts/OLink.algo.ts:133","pc":[887]},{"teal":900,"source":"contracts/OLink.algo.ts:133","pc":[888]},{"teal":901,"source":"contracts/OLink.algo.ts:133","pc":[889]},{"teal":902,"source":"contracts/OLink.algo.ts:133","pc":[890]},{"teal":903,"source":"contracts/OLink.algo.ts:133","pc":[891]},{"teal":904,"source":"contracts/OLink.algo.ts:133","pc":[892,893]},{"teal":905,"source":"contracts/OLink.algo.ts:133","pc":[894]},{"teal":906,"source":"contracts/OLink.algo.ts:133","pc":[895]},{"teal":907,"source":"contracts/OLink.algo.ts:133","pc":[896]},{"teal":908,"source":"contracts/OLink.algo.ts:133","pc":[897,898,899]},{"teal":909,"source":"contracts/OLink.algo.ts:133","pc":[900]},{"teal":910,"source":"contracts/OLink.algo.ts:133","pc":[901]},{"teal":911,"source":"contracts/OLink.algo.ts:133","pc":[902]},{"teal":915,"source":"contracts/OLink.algo.ts:134","pc":[903,904]},{"teal":918,"source":"contracts/OLink.algo.ts:121","pc":[905,906]},{"teal":919,"source":"contracts/OLink.algo.ts:121","pc":[907]},{"teal":924,"source":"contracts/OLink.algo.ts:137","pc":[908,909,910]},{"teal":925,"source":"contracts/OLink.algo.ts:137","pc":[911]},{"teal":926,"source":"contracts/OLink.algo.ts:137","pc":[912]},{"teal":930,"source":"contracts/OLink.algo.ts:137","pc":[913,914,915]},{"teal":933,"source":"contracts/OLink.algo.ts:137","pc":[916]},{"teal":938,"source":"contracts/OLink.algo.ts:138","pc":[917,918]},{"teal":939,"source":"contracts/OLink.algo.ts:138","pc":[919]},{"teal":940,"source":"contracts/OLink.algo.ts:138","pc":[920]},{"teal":941,"source":"contracts/OLink.algo.ts:138","pc":[921]},{"teal":944,"source":"contracts/OLink.algo.ts:138","errorMessage":"transaction verification failed: {\"txn\":\"this.txn\",\"field\":\"sender\",\"expected\":\"this.manager.value\"}","pc":[922]},{"teal":948,"source":"contracts/OLink.algo.ts:140","pc":[923,924]},{"teal":949,"source":"contracts/OLink.algo.ts:140","pc":[925]},{"teal":950,"source":"contracts/OLink.algo.ts:140","pc":[926]},{"teal":951,"source":"contracts/OLink.algo.ts:140","pc":[927,928]},{"teal":952,"source":"contracts/OLink.algo.ts:140","pc":[929]},{"teal":953,"source":"contracts/OLink.algo.ts:140","pc":[930,931]},{"teal":957,"source":"contracts/OLink.algo.ts:142","pc":[932,933]},{"teal":958,"source":"contracts/OLink.algo.ts:142","pc":[934]},{"teal":959,"source":"contracts/OLink.algo.ts:142","pc":[935]},{"teal":962,"source":"contracts/OLink.algo.ts:142","errorMessage":"No balance to withdraw","pc":[936]},{"teal":971,"source":"contracts/OLink.algo.ts:144","pc":[937]},{"teal":972,"source":"contracts/OLink.algo.ts:144","pc":[938]},{"teal":973,"source":"contracts/OLink.algo.ts:144","pc":[939,940]},{"teal":977,"source":"contracts/OLink.algo.ts:145","pc":[941,942]},{"teal":978,"source":"contracts/OLink.algo.ts:145","pc":[943,944]},{"teal":982,"source":"contracts/OLink.algo.ts:146","pc":[945,946]},{"teal":983,"source":"contracts/OLink.algo.ts:146","pc":[947,948]},{"teal":987,"source":"contracts/OLink.algo.ts:147","pc":[949,950]},{"teal":988,"source":"contracts/OLink.algo.ts:147","pc":[951,952]},{"teal":992,"source":"contracts/OLink.algo.ts:148","pc":[953]},{"teal":993,"source":"contracts/OLink.algo.ts:148","pc":[954]},{"teal":994,"source":"contracts/OLink.algo.ts:148","pc":[955,956]},{"teal":997,"source":"contracts/OLink.algo.ts:144","pc":[957]},{"teal":998,"source":"contracts/OLink.algo.ts:144","pc":[958,959]},{"teal":1001,"source":"contracts/OLink.algo.ts:144","pc":[960]},{"teal":1002,"source":"contracts/OLink.algo.ts:137","pc":[961]},{"teal":1005,"source":"contracts/OLink.algo.ts:3","pc":[962,963]},{"teal":1006,"source":"contracts/OLink.algo.ts:3","pc":[964,965,966]},{"teal":1007,"source":"contracts/OLink.algo.ts:3","pc":[967,968,969,970,971,972]},{"teal":1008,"source":"contracts/OLink.algo.ts:3","pc":[973,974,975]},{"teal":1009,"source":"contracts/OLink.algo.ts:3","pc":[976,977,978,979]},{"teal":1012,"source":"contracts/OLink.algo.ts:3","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[980]},{"teal":1015,"source":"contracts/OLink.algo.ts:3","pc":[981,982,983,984,985,986]},{"teal":1016,"source":"contracts/OLink.algo.ts:3","pc":[987,988,989,990,991,992]},{"teal":1017,"source":"contracts/OLink.algo.ts:3","pc":[993,994,995,996,997,998]},{"teal":1018,"source":"contracts/OLink.algo.ts:3","pc":[999,1000,1001,1002,1003,1004]},{"teal":1019,"source":"contracts/OLink.algo.ts:3","pc":[1005,1006,1007,1008,1009,1010]},{"teal":1020,"source":"contracts/OLink.algo.ts:3","pc":[1011,1012,1013,1014,1015,1016]},{"teal":1021,"source":"contracts/OLink.algo.ts:3","pc":[1017,1018,1019,1020,1021,1022]},{"teal":1022,"source":"contracts/OLink.algo.ts:3","pc":[1023,1024,1025]},{"teal":1023,"source":"contracts/OLink.algo.ts:3","pc":[1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041]},{"teal":1026,"source":"contracts/OLink.algo.ts:3","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[1042]},{"teal":1030,"source":"contracts/OLink.algo.ts:3","errorMessage":"this contract does not implement any ABI methods for UpdateApplication create","pc":[1043]},{"teal":1033,"source":"contracts/OLink.algo.ts:3","pc":[1044,1045]},{"teal":1034,"source":"contracts/OLink.algo.ts:3","pc":[1046,1047,1048]},{"teal":1035,"source":"contracts/OLink.algo.ts:3","pc":[1049,1050,1051,1052,1053,1054]},{"teal":1036,"source":"contracts/OLink.algo.ts:3","pc":[1055,1056,1057]},{"teal":1037,"source":"contracts/OLink.algo.ts:3","pc":[1058,1059,1060,1061]},{"teal":1040,"source":"contracts/OLink.algo.ts:3","errorMessage":"this contract does not implement the given ABI method for call UpdateApplication","pc":[1062]},{"teal":1044,"source":"contracts/OLink.algo.ts:3","errorMessage":"this contract does not implement any ABI methods for DeleteApplication create","pc":[1063]},{"teal":1047,"source":"contracts/OLink.algo.ts:3","pc":[1064,1065]},{"teal":1048,"source":"contracts/OLink.algo.ts:3","pc":[1066,1067,1068]},{"teal":1049,"source":"contracts/OLink.algo.ts:3","pc":[1069,1070,1071,1072,1073,1074]},{"teal":1050,"source":"contracts/OLink.algo.ts:3","pc":[1075,1076,1077]},{"teal":1051,"source":"contracts/OLink.algo.ts:3","pc":[1078,1079,1080,1081]},{"teal":1054,"source":"contracts/OLink.algo.ts:3","errorMessage":"this contract does not implement the given ABI method for call DeleteApplication","pc":[1082]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAHAQAEkAPEEwgYJgYACG9yYUFzYUlkB21hbmFnZXIEFR98dQlsaW5rUHJpY2U+MDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVoxGBSBBgsxGQiNDANEAAAAAAAAA4MDlwMxAAAAAAAAAAADlgCIAAIiQ4oAACoyCWeJNhoCFzYaAReIAAIiQ4oCAClkIxJEi/8jE0QxACpkEkQpi/9nJwSL/mexJLIQMgqyFCOyEov/shEjsgGziTYaAhc2GgEXiAACIkOKAgAxACpkEkSL/yMNRIv+Iw1EKYv/ZycEi/5nsSSyEDIKshQjshKL/7IRI7IBs4mIAAIiQ4oAADEAKmQSRImIAAIiQ4oAADEAKmQSRIkrNhoBVwIAiAAMSRUWVwYCTFBQsCJDigEBi/9JFRZXBgJMUL1MSESL/0kVFlcGAkxQvkRXAgCJKzYaAVcCAIgADEkVFlcGAkxQULAiQ4oBAShHAov/AYwAI4wBiwEhBgxBAEGLAYsAiABAjAKLAkkVFlcGAkxQvUxIQQAdiwJJFRZXBgJMUL5EVwIAi/8SQQAFiwJCAA9CAAIjRIsBIgiMAUL/tyiMAEYCiYoCAShHAiiMAIv+jAGLAYv+IQUIDEEAH4v/iwFVJwUVGIwCiwAnBYsCIlhQjACLASIIjAFC/9aLAIwARgKJKzYaAVcCADEWIglJOBAiEkSIAAxJFRZXBgJMUFCwIkOKAgEoRwQhBCWL/hUhBQgLCIwAi/84BzIKEkSL/zgIiwASRIv+AYwBI4wCiwIhBgxBAHqLAosBiP9ojAOLA0kVFlcGAkxQvUxIQQA7iwNJFRZXBgJMUL5EVwIAi/4SQQAjgBpTaG9ydGNvZGUgYWxyZWFkeSBleGlzdHM6IIsDUIwEI0RCAB2LA0kVFlcGAkxQSbxIi/5JFRZXBgJMUL+LA0IADIsCIgiMAkL/fiNEKIwARgSJKzYaAlcCADYaAVcCADEWIglJOBAkEkQxFoECCUk4ECISRIgADEkVFlcGAkxQULAiQ4oEASiL/UkVFlcGAkxQvUxIFEQhBCWL/BWL/RUICwiMAIv/OAcyChJEi/84CIsAEkSL/jgUMgoSRIv+OBInBGQSRIv+OBEpZBJEi/1JFRZXBgJMUEm8SIv8SRUWVwYCTFC/i/2MAImIAAIiQ4oAACgxACpkEkQyCilkcABIjACLACMNRLEkshAyCrIAMQCyFIsAshIpZLIRI7IBs4kxG0H8y4AEuER7NjYaAI4B/L4AgASL7wUOgATJoUY6gATfsTWXgATIvodhgAQPXQoTgAQO70ZggAS3NV/RNhoAjgf8jfzK/SX9XP4N/uL/egAAMRtB/QCABEb3ZTM2GgCOAfzzAAAxG0H8+4AEJIfDLDYaAI4B/O4A","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the OLink contract
 */
export type OLinkArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'bootstrap(uint64,uint64)void': {
      oraAsaId: bigint | number
      customLinkPrice: bigint | number
    }
    'updateCustomLinkCost(uint64,uint64)void': {
      asaId: bigint | number
      newCost: bigint | number
    }
    'updateApplication()void': Record<string, never>
    'deleteApplication()void': Record<string, never>
    'resolveShortcode(string)string': {
      shortcode: string
    }
    'findShortcode(string)string': {
      url: string
    }
    'createShortcode(pay,string)string': {
      mbrPayment: AppMethodCallTransactionArgument
      url: string
    }
    'createCustomShortcode(pay,axfer,string,string)string': {
      mbrPayment: AppMethodCallTransactionArgument
      oraPayment: AppMethodCallTransactionArgument
      shortcode: string
      url: string
    }
    'withdraw()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'bootstrap(uint64,uint64)void': [oraAsaId: bigint | number, customLinkPrice: bigint | number]
    'updateCustomLinkCost(uint64,uint64)void': [asaId: bigint | number, newCost: bigint | number]
    'updateApplication()void': []
    'deleteApplication()void': []
    'resolveShortcode(string)string': [shortcode: string]
    'findShortcode(string)string': [url: string]
    'createShortcode(pay,string)string': [mbrPayment: AppMethodCallTransactionArgument, url: string]
    'createCustomShortcode(pay,axfer,string,string)string': [mbrPayment: AppMethodCallTransactionArgument, oraPayment: AppMethodCallTransactionArgument, shortcode: string, url: string]
    'withdraw()void': []
  }
}

/**
 * The return type for each method
 */
export type OLinkReturns = {
  'createApplication()void': void
  'bootstrap(uint64,uint64)void': void
  'updateCustomLinkCost(uint64,uint64)void': void
  'updateApplication()void': void
  'deleteApplication()void': void
  'resolveShortcode(string)string': string
  'findShortcode(string)string': string
  'createShortcode(pay,string)string': string
  'createCustomShortcode(pay,axfer,string,string)string': string
  'withdraw()void': void
}

/**
 * Defines the types of available calls and state of the OLink smart contract.
 */
export type OLinkTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: OLinkArgs['obj']['createApplication()void']
      argsTuple: OLinkArgs['tuple']['createApplication()void']
      returns: OLinkReturns['createApplication()void']
    }>
    & Record<'bootstrap(uint64,uint64)void' | 'bootstrap', {
      argsObj: OLinkArgs['obj']['bootstrap(uint64,uint64)void']
      argsTuple: OLinkArgs['tuple']['bootstrap(uint64,uint64)void']
      returns: OLinkReturns['bootstrap(uint64,uint64)void']
    }>
    & Record<'updateCustomLinkCost(uint64,uint64)void' | 'updateCustomLinkCost', {
      argsObj: OLinkArgs['obj']['updateCustomLinkCost(uint64,uint64)void']
      argsTuple: OLinkArgs['tuple']['updateCustomLinkCost(uint64,uint64)void']
      returns: OLinkReturns['updateCustomLinkCost(uint64,uint64)void']
    }>
    & Record<'updateApplication()void' | 'updateApplication', {
      argsObj: OLinkArgs['obj']['updateApplication()void']
      argsTuple: OLinkArgs['tuple']['updateApplication()void']
      returns: OLinkReturns['updateApplication()void']
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: OLinkArgs['obj']['deleteApplication()void']
      argsTuple: OLinkArgs['tuple']['deleteApplication()void']
      returns: OLinkReturns['deleteApplication()void']
    }>
    & Record<'resolveShortcode(string)string' | 'resolveShortcode', {
      argsObj: OLinkArgs['obj']['resolveShortcode(string)string']
      argsTuple: OLinkArgs['tuple']['resolveShortcode(string)string']
      returns: OLinkReturns['resolveShortcode(string)string']
    }>
    & Record<'findShortcode(string)string' | 'findShortcode', {
      argsObj: OLinkArgs['obj']['findShortcode(string)string']
      argsTuple: OLinkArgs['tuple']['findShortcode(string)string']
      returns: OLinkReturns['findShortcode(string)string']
    }>
    & Record<'createShortcode(pay,string)string' | 'createShortcode', {
      argsObj: OLinkArgs['obj']['createShortcode(pay,string)string']
      argsTuple: OLinkArgs['tuple']['createShortcode(pay,string)string']
      returns: OLinkReturns['createShortcode(pay,string)string']
    }>
    & Record<'createCustomShortcode(pay,axfer,string,string)string' | 'createCustomShortcode', {
      argsObj: OLinkArgs['obj']['createCustomShortcode(pay,axfer,string,string)string']
      argsTuple: OLinkArgs['tuple']['createCustomShortcode(pay,axfer,string,string)string']
      returns: OLinkReturns['createCustomShortcode(pay,axfer,string,string)string']
    }>
    & Record<'withdraw()void' | 'withdraw', {
      argsObj: OLinkArgs['obj']['withdraw()void']
      argsTuple: OLinkArgs['tuple']['withdraw()void']
      returns: OLinkReturns['withdraw()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        manager: string
        oraAsaId: bigint
        customLinkPrice: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        linkMap: Map<string, string>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type OLinkSignatures = keyof OLinkTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type OLinkNonVoidMethodSignatures = keyof OLinkTypes['methods'] extends infer T ? T extends keyof OLinkTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the OLink smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends OLinkSignatures> = OLinkTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the OLink smart contract to the method's return type
 */
export type MethodReturn<TSignature extends OLinkSignatures> = OLinkTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = OLinkTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = OLinkTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type OLinkCreateCallParams =
  | Expand<CallParams<OLinkArgs['obj']['createApplication()void'] | OLinkArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<OLinkArgs['obj']['createApplication()void'] | OLinkArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type OLinkUpdateCallParams =
  | Expand<CallParams<OLinkArgs['obj']['updateApplication()void'] | OLinkArgs['tuple']['updateApplication()void']> & {method: 'updateApplication'}>
  | Expand<CallParams<OLinkArgs['obj']['updateApplication()void'] | OLinkArgs['tuple']['updateApplication()void']> & {method: 'updateApplication()void'}>
/**
 * Defines supported delete method params for this smart contract
 */
export type OLinkDeleteCallParams =
  | Expand<CallParams<OLinkArgs['obj']['deleteApplication()void'] | OLinkArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication'}>
  | Expand<CallParams<OLinkArgs['obj']['deleteApplication()void'] | OLinkArgs['tuple']['deleteApplication()void']> & {method: 'deleteApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type OLinkDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: OLinkCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: OLinkUpdateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: OLinkDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the OLink smart contract
 */
export abstract class OLinkParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends OLinkCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return OLinkParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the OLink smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<OLinkArgs['obj']['createApplication()void'] | OLinkArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends OLinkUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication()void':
            return OLinkParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the OLink smart contract using the updateApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<OLinkArgs['obj']['updateApplication()void'] | OLinkArgs['tuple']['updateApplication()void']> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends OLinkDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'deleteApplication':
          case 'deleteApplication()void':
            return OLinkParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the OLink smart contract using the deleteApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<OLinkArgs['obj']['deleteApplication()void'] | OLinkArgs['tuple']['deleteApplication()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'deleteApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(params: CallParams<OLinkArgs['obj']['bootstrap(uint64,uint64)void'] | OLinkArgs['tuple']['bootstrap(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.oraAsaId, params.args.customLinkPrice],
    }
  }
  /**
   * Constructs a no op call for the updateCustomLinkCost(uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateCustomLinkCost(params: CallParams<OLinkArgs['obj']['updateCustomLinkCost(uint64,uint64)void'] | OLinkArgs['tuple']['updateCustomLinkCost(uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateCustomLinkCost(uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asaId, params.args.newCost],
    }
  }
  /**
   * Constructs a no op call for the resolveShortcode(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static resolveShortcode(params: CallParams<OLinkArgs['obj']['resolveShortcode(string)string'] | OLinkArgs['tuple']['resolveShortcode(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'resolveShortcode(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.shortcode],
    }
  }
  /**
   * Constructs a no op call for the findShortcode(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static findShortcode(params: CallParams<OLinkArgs['obj']['findShortcode(string)string'] | OLinkArgs['tuple']['findShortcode(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'findShortcode(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.url],
    }
  }
  /**
   * Constructs a no op call for the createShortcode(pay,string)string ABI method
   *
   * Called to generate a shortcode for a URL.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createShortcode(params: CallParams<OLinkArgs['obj']['createShortcode(pay,string)string'] | OLinkArgs['tuple']['createShortcode(pay,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createShortcode(pay,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrPayment, params.args.url],
    }
  }
  /**
   * Constructs a no op call for the createCustomShortcode(pay,axfer,string,string)string ABI method
   *
   * Called to generate a shortcode for a URL.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createCustomShortcode(params: CallParams<OLinkArgs['obj']['createCustomShortcode(pay,axfer,string,string)string'] | OLinkArgs['tuple']['createCustomShortcode(pay,axfer,string,string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createCustomShortcode(pay,axfer,string,string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrPayment, params.args.oraPayment, params.args.shortcode, params.args.url],
    }
  }
  /**
   * Constructs a no op call for the withdraw()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdraw(params: CallParams<OLinkArgs['obj']['withdraw()void'] | OLinkArgs['tuple']['withdraw()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the OLink smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class OLinkFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `OLinkFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }

  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }

  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }

  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }

  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new OLinkClient(this.appFactory.getAppClientById(params))
  }

  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new OLinkClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the OLink smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: OLinkDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? OLinkParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (OLinkCreateCallParams & { args: Uint8Array[] }) : undefined,
      updateParams: params.updateParams?.method ? OLinkParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams ? params.updateParams as (OLinkUpdateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? OLinkParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (OLinkDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new OLinkClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OLink smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<OLinkArgs['obj']['createApplication()void'] | OLinkArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(OLinkParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the OLink smart contract using the updateApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployUpdate params
       */
      updateApplication: (params: CallParams<OLinkArgs['obj']['updateApplication()void'] | OLinkArgs['tuple']['updateApplication()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appFactory.params.deployUpdate(OLinkParamsFactory.update.updateApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the OLink smart contract using the deleteApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<OLinkArgs['obj']['deleteApplication()void'] | OLinkArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(OLinkParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OLink smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<OLinkArgs['obj']['createApplication()void'] | OLinkArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(OLinkParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OLink smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<OLinkArgs['obj']['createApplication()void'] | OLinkArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(OLinkParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | OLinkReturns['createApplication()void']) }, appClient: new OLinkClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the OLink smart contract
 */
export class OLinkClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `OLinkClient`
   *
   * @param appClient An `AppClient` instance which has been created with the OLink app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `OLinkClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }

  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends OLinkNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }

  /**
   * Returns a new `OLinkClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<OLinkClient> {
    return new OLinkClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }

  /**
   * Returns an `OLinkClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<OLinkClient> {
    return new OLinkClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }

  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }

  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }

  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }

  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }

  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the OLink smart contract using the `updateApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update params
       */
      updateApplication: (params: CallParams<OLinkArgs['obj']['updateApplication()void'] | OLinkArgs['tuple']['updateApplication()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.params.update(OLinkParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the OLink smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<OLinkArgs['obj']['deleteApplication()void'] | OLinkArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.params.delete(OLinkParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the OLink smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the OLink smart contract using the `bootstrap(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap: (params: CallParams<OLinkArgs['obj']['bootstrap(uint64,uint64)void'] | OLinkArgs['tuple']['bootstrap(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OLinkParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the OLink smart contract using the `updateCustomLinkCost(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateCustomLinkCost: (params: CallParams<OLinkArgs['obj']['updateCustomLinkCost(uint64,uint64)void'] | OLinkArgs['tuple']['updateCustomLinkCost(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OLinkParamsFactory.updateCustomLinkCost(params))
    },

    /**
     * Makes a call to the OLink smart contract using the `resolveShortcode(string)string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    resolveShortcode: (params: CallParams<OLinkArgs['obj']['resolveShortcode(string)string'] | OLinkArgs['tuple']['resolveShortcode(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OLinkParamsFactory.resolveShortcode(params))
    },

    /**
     * Makes a call to the OLink smart contract using the `findShortcode(string)string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    findShortcode: (params: CallParams<OLinkArgs['obj']['findShortcode(string)string'] | OLinkArgs['tuple']['findShortcode(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OLinkParamsFactory.findShortcode(params))
    },

    /**
     * Makes a call to the OLink smart contract using the `createShortcode(pay,string)string` ABI method.
     *
     * Called to generate a shortcode for a URL.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createShortcode: (params: CallParams<OLinkArgs['obj']['createShortcode(pay,string)string'] | OLinkArgs['tuple']['createShortcode(pay,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OLinkParamsFactory.createShortcode(params))
    },

    /**
     * Makes a call to the OLink smart contract using the `createCustomShortcode(pay,axfer,string,string)string` ABI method.
     *
     * Called to generate a shortcode for a URL.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createCustomShortcode: (params: CallParams<OLinkArgs['obj']['createCustomShortcode(pay,axfer,string,string)string'] | OLinkArgs['tuple']['createCustomShortcode(pay,axfer,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OLinkParamsFactory.createCustomShortcode(params))
    },

    /**
     * Makes a call to the OLink smart contract using the `withdraw()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdraw: (params: CallParams<OLinkArgs['obj']['withdraw()void'] | OLinkArgs['tuple']['withdraw()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(OLinkParamsFactory.withdraw(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the OLink smart contract using the `updateApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update transaction
       */
      updateApplication: (params: CallParams<OLinkArgs['obj']['updateApplication()void'] | OLinkArgs['tuple']['updateApplication()void']> & AppClientCompilationParams = {args: []}) => {
        return this.appClient.createTransaction.update(OLinkParamsFactory.update.updateApplication(params))
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the OLink smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<OLinkArgs['obj']['deleteApplication()void'] | OLinkArgs['tuple']['deleteApplication()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(OLinkParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the OLink smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the OLink smart contract using the `bootstrap(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap: (params: CallParams<OLinkArgs['obj']['bootstrap(uint64,uint64)void'] | OLinkArgs['tuple']['bootstrap(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OLinkParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the OLink smart contract using the `updateCustomLinkCost(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateCustomLinkCost: (params: CallParams<OLinkArgs['obj']['updateCustomLinkCost(uint64,uint64)void'] | OLinkArgs['tuple']['updateCustomLinkCost(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OLinkParamsFactory.updateCustomLinkCost(params))
    },

    /**
     * Makes a call to the OLink smart contract using the `resolveShortcode(string)string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    resolveShortcode: (params: CallParams<OLinkArgs['obj']['resolveShortcode(string)string'] | OLinkArgs['tuple']['resolveShortcode(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OLinkParamsFactory.resolveShortcode(params))
    },

    /**
     * Makes a call to the OLink smart contract using the `findShortcode(string)string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    findShortcode: (params: CallParams<OLinkArgs['obj']['findShortcode(string)string'] | OLinkArgs['tuple']['findShortcode(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OLinkParamsFactory.findShortcode(params))
    },

    /**
     * Makes a call to the OLink smart contract using the `createShortcode(pay,string)string` ABI method.
     *
     * Called to generate a shortcode for a URL.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createShortcode: (params: CallParams<OLinkArgs['obj']['createShortcode(pay,string)string'] | OLinkArgs['tuple']['createShortcode(pay,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OLinkParamsFactory.createShortcode(params))
    },

    /**
     * Makes a call to the OLink smart contract using the `createCustomShortcode(pay,axfer,string,string)string` ABI method.
     *
     * Called to generate a shortcode for a URL.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createCustomShortcode: (params: CallParams<OLinkArgs['obj']['createCustomShortcode(pay,axfer,string,string)string'] | OLinkArgs['tuple']['createCustomShortcode(pay,axfer,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OLinkParamsFactory.createCustomShortcode(params))
    },

    /**
     * Makes a call to the OLink smart contract using the `withdraw()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdraw: (params: CallParams<OLinkArgs['obj']['withdraw()void'] | OLinkArgs['tuple']['withdraw()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(OLinkParamsFactory.withdraw(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the OLink smart contract using the `updateApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The update result
       */
      updateApplication: async (params: CallParams<OLinkArgs['obj']['updateApplication()void'] | OLinkArgs['tuple']['updateApplication()void']> & AppClientCompilationParams & SendParams = {args: []}) => {
        const result = await this.appClient.send.update(OLinkParamsFactory.update.updateApplication(params))
        return {...result, return: result.return as unknown as (undefined | OLinkReturns['updateApplication()void'])}
      },

    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the OLink smart contract using the `deleteApplication()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<OLinkArgs['obj']['deleteApplication()void'] | OLinkArgs['tuple']['deleteApplication()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(OLinkParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as unknown as (undefined | OLinkReturns['deleteApplication()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the OLink smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the OLink smart contract using the `bootstrap(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap: async (params: CallParams<OLinkArgs['obj']['bootstrap(uint64,uint64)void'] | OLinkArgs['tuple']['bootstrap(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OLinkParamsFactory.bootstrap(params))
      return {...result, return: result.return as unknown as (undefined | OLinkReturns['bootstrap(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the OLink smart contract using the `updateCustomLinkCost(uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateCustomLinkCost: async (params: CallParams<OLinkArgs['obj']['updateCustomLinkCost(uint64,uint64)void'] | OLinkArgs['tuple']['updateCustomLinkCost(uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OLinkParamsFactory.updateCustomLinkCost(params))
      return {...result, return: result.return as unknown as (undefined | OLinkReturns['updateCustomLinkCost(uint64,uint64)void'])}
    },

    /**
     * Makes a call to the OLink smart contract using the `resolveShortcode(string)string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    resolveShortcode: async (params: CallParams<OLinkArgs['obj']['resolveShortcode(string)string'] | OLinkArgs['tuple']['resolveShortcode(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OLinkParamsFactory.resolveShortcode(params))
      return {...result, return: result.return as unknown as (undefined | OLinkReturns['resolveShortcode(string)string'])}
    },

    /**
     * Makes a call to the OLink smart contract using the `findShortcode(string)string` ABI method.
     *
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    findShortcode: async (params: CallParams<OLinkArgs['obj']['findShortcode(string)string'] | OLinkArgs['tuple']['findShortcode(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OLinkParamsFactory.findShortcode(params))
      return {...result, return: result.return as unknown as (undefined | OLinkReturns['findShortcode(string)string'])}
    },

    /**
     * Makes a call to the OLink smart contract using the `createShortcode(pay,string)string` ABI method.
     *
     * Called to generate a shortcode for a URL.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createShortcode: async (params: CallParams<OLinkArgs['obj']['createShortcode(pay,string)string'] | OLinkArgs['tuple']['createShortcode(pay,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OLinkParamsFactory.createShortcode(params))
      return {...result, return: result.return as unknown as (undefined | OLinkReturns['createShortcode(pay,string)string'])}
    },

    /**
     * Makes a call to the OLink smart contract using the `createCustomShortcode(pay,axfer,string,string)string` ABI method.
     *
     * Called to generate a shortcode for a URL.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createCustomShortcode: async (params: CallParams<OLinkArgs['obj']['createCustomShortcode(pay,axfer,string,string)string'] | OLinkArgs['tuple']['createCustomShortcode(pay,axfer,string,string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OLinkParamsFactory.createCustomShortcode(params))
      return {...result, return: result.return as unknown as (undefined | OLinkReturns['createCustomShortcode(pay,axfer,string,string)string'])}
    },

    /**
     * Makes a call to the OLink smart contract using the `withdraw()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdraw: async (params: CallParams<OLinkArgs['obj']['withdraw()void'] | OLinkArgs['tuple']['withdraw()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(OLinkParamsFactory.withdraw(params))
      return {...result, return: result.return as unknown as (undefined | OLinkReturns['withdraw()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new OLinkClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the OLink smart contract using the `resolveShortcode(string)string` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async resolveShortcode(params: CallParams<OLinkArgs['obj']['resolveShortcode(string)string'] | OLinkArgs['tuple']['resolveShortcode(string)string']>) {
    const result = await this.appClient.send.call(OLinkParamsFactory.resolveShortcode(params))
    return result.return as unknown as OLinkReturns['resolveShortcode(string)string']
  }

  /**
   * Makes a readonly (simulated) call to the OLink smart contract using the `findShortcode(string)string` ABI method.
   *
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async findShortcode(params: CallParams<OLinkArgs['obj']['findShortcode(string)string'] | OLinkArgs['tuple']['findShortcode(string)string']>) {
    const result = await this.appClient.send.call(OLinkParamsFactory.findShortcode(params))
    return result.return as unknown as OLinkReturns['findShortcode(string)string']
  }

  /**
   * Methods to access state for the current OLink app
   */
  state = {
    /**
     * Methods to access global state for the current OLink app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          manager: result.manager,
          oraAsaId: result.oraAsaId,
          customLinkPrice: result.customLinkPrice,
        }
      },
      /**
       * Get the current value of the manager key in global state
       */
      manager: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("manager")) as string | undefined },
      /**
       * Get the current value of the oraAsaId key in global state
       */
      oraAsaId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("oraAsaId")) as bigint | undefined },
      /**
       * Get the current value of the customLinkPrice key in global state
       */
      customLinkPrice: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("customLinkPrice")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current OLink app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return result;
      },
      /**
       * Get values from the linkMap map in box state
       */
      linkMap: {
        /**
         * Get all current values of the linkMap map in box state
         */
        getMap: async (): Promise<Map<string, string>> => { return (await this.appClient.state.box.getMap("linkMap")) as Map<string, string> },
        /**
         * Get a current value of the linkMap map by key from box state
         */
        value: async (key: string): Promise<string | undefined> => { return await this.appClient.state.box.getMapValue("linkMap", key) as string | undefined },
      },
    },
  }

  public newGroup(): OLinkComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a bootstrap(uint64,uint64)void method call against the OLink contract
       */
      bootstrap(params: CallParams<OLinkArgs['obj']['bootstrap(uint64,uint64)void'] | OLinkArgs['tuple']['bootstrap(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateCustomLinkCost(uint64,uint64)void method call against the OLink contract
       */
      updateCustomLinkCost(params: CallParams<OLinkArgs['obj']['updateCustomLinkCost(uint64,uint64)void'] | OLinkArgs['tuple']['updateCustomLinkCost(uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateCustomLinkCost(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a resolveShortcode(string)string method call against the OLink contract
       */
      resolveShortcode(params: CallParams<OLinkArgs['obj']['resolveShortcode(string)string'] | OLinkArgs['tuple']['resolveShortcode(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.resolveShortcode(params)))
        resultMappers.push((v) => client.decodeReturnValue('resolveShortcode(string)string', v))
        return this
      },
      /**
       * Add a findShortcode(string)string method call against the OLink contract
       */
      findShortcode(params: CallParams<OLinkArgs['obj']['findShortcode(string)string'] | OLinkArgs['tuple']['findShortcode(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.findShortcode(params)))
        resultMappers.push((v) => client.decodeReturnValue('findShortcode(string)string', v))
        return this
      },
      /**
       * Add a createShortcode(pay,string)string method call against the OLink contract
       */
      createShortcode(params: CallParams<OLinkArgs['obj']['createShortcode(pay,string)string'] | OLinkArgs['tuple']['createShortcode(pay,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createShortcode(params)))
        resultMappers.push((v) => client.decodeReturnValue('createShortcode(pay,string)string', v))
        return this
      },
      /**
       * Add a createCustomShortcode(pay,axfer,string,string)string method call against the OLink contract
       */
      createCustomShortcode(params: CallParams<OLinkArgs['obj']['createCustomShortcode(pay,axfer,string,string)string'] | OLinkArgs['tuple']['createCustomShortcode(pay,axfer,string,string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createCustomShortcode(params)))
        resultMappers.push((v) => client.decodeReturnValue('createCustomShortcode(pay,axfer,string,string)string', v))
        return this
      },
      /**
       * Add a withdraw()void method call against the OLink contract
       */
      withdraw(params: CallParams<OLinkArgs['obj']['withdraw()void'] | OLinkArgs['tuple']['withdraw()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdraw(params)))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        return {
          updateApplication: (params: CallParams<OLinkArgs['obj']['updateApplication()void'] | OLinkArgs['tuple']['updateApplication()void']> & AppClientCompilationParams) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdateMethodCall(await client.params.update.updateApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      get delete() {
        return {
          deleteApplication: (params: CallParams<OLinkArgs['obj']['deleteApplication()void'] | OLinkArgs['tuple']['deleteApplication()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the OLink contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as OLinkComposer
  }
}
export type OLinkComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(params?: CallParams<OLinkArgs['obj']['bootstrap(uint64,uint64)void'] | OLinkArgs['tuple']['bootstrap(uint64,uint64)void']>): OLinkComposer<[...TReturns, OLinkReturns['bootstrap(uint64,uint64)void'] | undefined]>

  /**
   * Calls the updateCustomLinkCost(uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateCustomLinkCost(params?: CallParams<OLinkArgs['obj']['updateCustomLinkCost(uint64,uint64)void'] | OLinkArgs['tuple']['updateCustomLinkCost(uint64,uint64)void']>): OLinkComposer<[...TReturns, OLinkReturns['updateCustomLinkCost(uint64,uint64)void'] | undefined]>

  /**
   * Calls the resolveShortcode(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resolveShortcode(params?: CallParams<OLinkArgs['obj']['resolveShortcode(string)string'] | OLinkArgs['tuple']['resolveShortcode(string)string']>): OLinkComposer<[...TReturns, OLinkReturns['resolveShortcode(string)string'] | undefined]>

  /**
   * Calls the findShortcode(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  findShortcode(params?: CallParams<OLinkArgs['obj']['findShortcode(string)string'] | OLinkArgs['tuple']['findShortcode(string)string']>): OLinkComposer<[...TReturns, OLinkReturns['findShortcode(string)string'] | undefined]>

  /**
   * Calls the createShortcode(pay,string)string ABI method.
   *
   * Called to generate a shortcode for a URL.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createShortcode(params?: CallParams<OLinkArgs['obj']['createShortcode(pay,string)string'] | OLinkArgs['tuple']['createShortcode(pay,string)string']>): OLinkComposer<[...TReturns, OLinkReturns['createShortcode(pay,string)string'] | undefined]>

  /**
   * Calls the createCustomShortcode(pay,axfer,string,string)string ABI method.
   *
   * Called to generate a shortcode for a URL.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createCustomShortcode(params?: CallParams<OLinkArgs['obj']['createCustomShortcode(pay,axfer,string,string)string'] | OLinkArgs['tuple']['createCustomShortcode(pay,axfer,string,string)string']>): OLinkComposer<[...TReturns, OLinkReturns['createCustomShortcode(pay,axfer,string,string)string'] | undefined]>

  /**
   * Calls the withdraw()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(params?: CallParams<OLinkArgs['obj']['withdraw()void'] | OLinkArgs['tuple']['withdraw()void']>): OLinkComposer<[...TReturns, OLinkReturns['withdraw()void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the OLink smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<OLinkArgs['obj']['deleteApplication()void'] | OLinkArgs['tuple']['deleteApplication()void']>): OLinkComposer<[...TReturns, OLinkReturns['deleteApplication()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the OLink smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): OLinkComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): OLinkComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<OLinkComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<OLinkComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<OLinkComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<OLinkComposerResults<TReturns>>
}
export type OLinkComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

