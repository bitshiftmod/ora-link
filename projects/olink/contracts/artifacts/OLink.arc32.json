{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "bootstrap(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateCustomLinkCost(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateApplication()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "resolveShortcode(string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "findShortcode(string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createShortcode(pay,string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createCustomShortcode(pay,axfer,string,string)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "CALL",
    "delete_application": "CALL"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "manager": {
          "type": "bytes",
          "key": "manager"
        },
        "oraAsaId": {
          "type": "uint64",
          "key": "oraAsaId"
        },
        "customLinkPrice": {
          "type": "uint64",
          "key": "linkPrice"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "OLink",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "bootstrap",
        "args": [
          {
            "name": "oraAsaId",
            "type": "uint64"
          },
          {
            "name": "customLinkPrice",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateCustomLinkCost",
        "args": [
          {
            "name": "asaId",
            "type": "uint64"
          },
          {
            "name": "newCost",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "resolveShortcode",
        "readonly": true,
        "args": [
          {
            "name": "shortcode",
            "type": "string"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "findShortcode",
        "readonly": true,
        "args": [
          {
            "name": "url",
            "type": "string"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "createShortcode",
        "desc": "Called to generate a shortcode for a URL.",
        "args": [
          {
            "name": "mbrPayment",
            "type": "pay"
          },
          {
            "name": "url",
            "type": "string"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "createCustomShortcode",
        "desc": "Called to generate a shortcode for a URL.",
        "args": [
          {
            "name": "mbrPayment",
            "type": "pay"
          },
          {
            "name": "oraPayment",
            "type": "axfer"
          },
          {
            "name": "shortcode",
            "type": "string"
          },
          {
            "name": "url",
            "type": "string"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "withdraw",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}