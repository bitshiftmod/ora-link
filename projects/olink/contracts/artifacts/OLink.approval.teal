#pragma version 10
intcblock 1 0 4 400 2500 8 24
bytecblock 0x 0x6f72614173614964 0x6d616e61676572 0x151f7c75 0x6c696e6b5072696365 "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

// This TEAL was generated by TEALScript v0.106.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_UpdateApplication *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_DeleteApplication

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts/OLink.algo.ts:14
	// this.manager.value = globals.creatorAddress
	bytec 2 //  "manager"
	global CreatorAddress
	app_global_put
	retsub

// bootstrap(uint64,uint64)void
*abi_route_bootstrap:
	// customLinkPrice: uint64
	txna ApplicationArgs 2
	btoi

	// oraAsaId: uint64
	txna ApplicationArgs 1
	btoi

	// execute bootstrap(uint64,uint64)void
	callsub bootstrap
	intc 0 // 1
	return

// bootstrap(oraAsaId: AssetID, customLinkPrice: uint64): void
bootstrap:
	proto 2 0

	// contracts/OLink.algo.ts:18
	// assert(this.oraAsaId.value === AssetID.zeroIndex, 'Already bootstrapped')
	bytec 1 //  "oraAsaId"
	app_global_get
	intc 1 // 0
	==

	// Already bootstrapped
	assert

	// contracts/OLink.algo.ts:19
	// assert(oraAsaId !== AssetID.zeroIndex, 'ASA must be non-zero')
	frame_dig -1 // oraAsaId: AssetID
	intc 1 // 0
	!=

	// ASA must be non-zero
	assert

	// contracts/OLink.algo.ts:20
	// verifyAppCallTxn(this.txn, { sender: this.manager.value })
	// verify sender
	txn Sender
	bytec 2 //  "manager"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.manager.value"}
	assert

	// contracts/OLink.algo.ts:22
	// this.oraAsaId.value = oraAsaId
	bytec 1 //  "oraAsaId"
	frame_dig -1 // oraAsaId: AssetID
	app_global_put

	// contracts/OLink.algo.ts:23
	// this.customLinkPrice.value = customLinkPrice
	bytec 4 //  "linkPrice"
	frame_dig -2 // customLinkPrice: uint64
	app_global_put

	// contracts/OLink.algo.ts:26
	// sendAssetTransfer({
	//       assetReceiver: this.app.address,
	//       assetAmount: 0,
	//       xferAsset: oraAsaId,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/OLink.algo.ts:27
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/OLink.algo.ts:28
	// assetAmount: 0
	intc 1 // 0
	itxn_field AssetAmount

	// contracts/OLink.algo.ts:29
	// xferAsset: oraAsaId
	frame_dig -1 // oraAsaId: AssetID
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// updateCustomLinkCost(uint64,uint64)void
*abi_route_updateCustomLinkCost:
	// newCost: uint64
	txna ApplicationArgs 2
	btoi

	// asaId: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateCustomLinkCost(uint64,uint64)void
	callsub updateCustomLinkCost
	intc 0 // 1
	return

// updateCustomLinkCost(asaId: AssetID, newCost: uint64): void
updateCustomLinkCost:
	proto 2 0

	// contracts/OLink.algo.ts:34
	// verifyAppCallTxn(this.txn, { sender: this.manager.value })
	// verify sender
	txn Sender
	bytec 2 //  "manager"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.manager.value"}
	assert

	// contracts/OLink.algo.ts:35
	// assert(asaId.id > 0, 'ASA ID must be non-zero')
	frame_dig -1 // asaId: AssetID
	intc 1 // 0
	>

	// ASA ID must be non-zero
	assert

	// contracts/OLink.algo.ts:36
	// assert(newCost > 0, 'New cost must be non-zero')
	frame_dig -2 // newCost: uint64
	intc 1 // 0
	>

	// New cost must be non-zero
	assert

	// contracts/OLink.algo.ts:38
	// this.oraAsaId.value = asaId
	bytec 1 //  "oraAsaId"
	frame_dig -1 // asaId: AssetID
	app_global_put

	// contracts/OLink.algo.ts:39
	// this.customLinkPrice.value = newCost
	bytec 4 //  "linkPrice"
	frame_dig -2 // newCost: uint64
	app_global_put

	// contracts/OLink.algo.ts:42
	// sendAssetTransfer({
	//       assetReceiver: this.app.address,
	//       assetAmount: 0,
	//       xferAsset: asaId,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/OLink.algo.ts:43
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/OLink.algo.ts:44
	// assetAmount: 0
	intc 1 // 0
	itxn_field AssetAmount

	// contracts/OLink.algo.ts:45
	// xferAsset: asaId
	frame_dig -1 // asaId: AssetID
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// updateApplication()void
*abi_route_updateApplication:
	// execute updateApplication()void
	callsub updateApplication
	intc 0 // 1
	return

// updateApplication(): void
updateApplication:
	proto 0 0

	// contracts/OLink.algo.ts:51
	// verifyAppCallTxn(this.txn, { sender: this.manager.value })
	// verify sender
	txn Sender
	bytec 2 //  "manager"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.manager.value"}
	assert
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	intc 0 // 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// contracts/OLink.algo.ts:56
	// verifyAppCallTxn(this.txn, { sender: this.manager.value })
	// verify sender
	txn Sender
	bytec 2 //  "manager"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.manager.value"}
	assert
	retsub

// resolveShortcode(string)string
*abi_route_resolveShortcode:
	// The ABI return prefix
	bytec 3 // 0x151f7c75

	// shortcode: string
	txna ApplicationArgs 1
	extract 2 0

	// execute resolveShortcode(string)string
	callsub resolveShortcode
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// resolveShortcode(shortcode: string): string
resolveShortcode:
	proto 1 1

	// contracts/OLink.algo.ts:61
	// assert(this.linkMap(shortcode).exists, 'Shortcode does not exist')
	frame_dig -1 // shortcode: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	box_len
	swap
	pop

	// Shortcode does not exist
	assert

	// contracts/OLink.algo.ts:62
	// return this.linkMap(shortcode).value;
	frame_dig -1 // shortcode: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	box_get

	// box value does not exist: this.linkMap(shortcode).value
	assert
	extract 2 0
	retsub

// findShortcode(string)string
*abi_route_findShortcode:
	// The ABI return prefix
	bytec 3 // 0x151f7c75

	// url: string
	txna ApplicationArgs 1
	extract 2 0

	// execute findShortcode(string)string
	callsub findShortcode
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// findShortcode(url: string): string
findShortcode:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts/OLink.algo.ts:67
	// hash = sha256(url)
	frame_dig -1 // url: string
	sha256
	frame_bury 0 // hash: byte[32]

	// contracts/OLink.algo.ts:69
	// for (let i = 0; i < 24; i += 1)
	intc 1 // 0
	frame_bury 1 // i: uint64

*for_0:
	// contracts/OLink.algo.ts:69
	// i < 24
	frame_dig 1 // i: uint64
	intc 6 // 24
	<
	bz *for_0_end

	// contracts/OLink.algo.ts:70
	// shortcode = this.generateShortcode(hash, i)
	frame_dig 1 // i: uint64
	frame_dig 0 // hash: byte[32]
	callsub generateShortcode
	frame_bury 2 // shortcode: string

	// *if0_condition
	// contracts/OLink.algo.ts:71
	// this.linkMap(shortcode).exists
	frame_dig 2 // shortcode: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	box_len
	swap
	pop
	bz *if0_else

	// *if0_consequent
	// *if1_condition
	// contracts/OLink.algo.ts:72
	// this.linkMap(shortcode).value === url
	frame_dig 2 // shortcode: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	box_get

	// box value does not exist: this.linkMap(shortcode).value
	assert
	extract 2 0
	frame_dig -1 // url: string
	==
	bz *if1_end

	// *if1_consequent
	// contracts/OLink.algo.ts:73
	// return shortcode;
	frame_dig 2 // shortcode: string
	b *findShortcode*return

*if1_end:
	b *if0_end

*if0_else:
	// contracts/OLink.algo.ts:76
	// assert(false, 'Shortcode does not exist')
	intc 1 // 0

	// Shortcode does not exist
	assert

*if0_end:

*for_0_continue:
	// contracts/OLink.algo.ts:69
	// i += 1
	frame_dig 1 // i: uint64
	intc 0 // 1
	+
	frame_bury 1 // i: uint64
	b *for_0

*for_0_end:
	// contracts/OLink.algo.ts:79
	// return '';
	bytec 0 //  ""

*findShortcode*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// generateShortcode(hash: StaticBytes<32>, startIndex: uint64): string
generateShortcode:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts/OLink.algo.ts:85
	// shortcode = ''
	bytec 0 //  ""
	frame_bury 0 // shortcode: byte[]

	// contracts/OLink.algo.ts:87
	// for (let i = startIndex; i < startIndex + 8; i += 1)
	frame_dig -2 // startIndex: uint64
	frame_bury 1 // i: uint64

*for_1:
	// contracts/OLink.algo.ts:87
	// i < startIndex + 8
	frame_dig 1 // i: uint64
	frame_dig -2 // startIndex: uint64
	intc 5 // 8
	+
	<
	bz *for_1_end

	// contracts/OLink.algo.ts:88
	// num = getbyte(hash, i) % charset.length
	frame_dig -1 // hash: StaticBytes<32>
	frame_dig 1 // i: uint64
	getbyte
	bytec 5 // "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
	len
	%
	frame_bury 2 // num: uint64

	// contracts/OLink.algo.ts:89
	// shortcode += charset[num]
	frame_dig 0 // shortcode: byte[]
	bytec 5 // "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
	frame_dig 2 // num: uint64
	intc 0 // 1
	extract3
	concat
	frame_bury 0 // shortcode: byte[]

*for_1_continue:
	// contracts/OLink.algo.ts:87
	// i += 1
	frame_dig 1 // i: uint64
	intc 0 // 1
	+
	frame_bury 1 // i: uint64
	b *for_1

*for_1_end:
	// contracts/OLink.algo.ts:91
	// return shortcode;
	frame_dig 0 // shortcode: byte[]

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// createShortcode(pay,string)string
*abi_route_createShortcode:
	// The ABI return prefix
	bytec 3 // 0x151f7c75

	// url: string
	txna ApplicationArgs 1
	extract 2 0

	// mbrPayment: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 1 (mbrPayment) for createShortcode must be a pay transaction
	assert

	// execute createShortcode(pay,string)string
	callsub createShortcode
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// createShortcode(mbrPayment: PayTxn, url: string): string
//
// Called to generate a shortcode for a URL.
createShortcode:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 4

	// contracts/OLink.algo.ts:96
	// mbrPaymentAmount = 2500 + 400 * (url.length + 8 + 4)
	intc 4 // 2500
	intc 3 // 400
	frame_dig -2 // url: string
	len
	intc 5 // 8
	+
	intc 2 // 4
	+
	*
	+
	frame_bury 0 // mbrPaymentAmount: uint64

	// contracts/OLink.algo.ts:98
	// assert(mbrPayment.receiver === this.app.address, 'MBR Payment not sent to app address')
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// MBR Payment not sent to app address
	assert

	// contracts/OLink.algo.ts:99
	// assert(mbrPayment.amount === mbrPaymentAmount, 'Incorrect payment amount')
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Amount
	frame_dig 0 // mbrPaymentAmount: uint64
	==

	// Incorrect payment amount
	assert

	// contracts/OLink.algo.ts:101
	// hash = sha256(url)
	frame_dig -2 // url: string
	sha256
	frame_bury 1 // hash: byte[32]

	// contracts/OLink.algo.ts:103
	// for (let i = 0; i < 24; i += 1)
	intc 1 // 0
	frame_bury 2 // i: uint64

*for_2:
	// contracts/OLink.algo.ts:103
	// i < 24
	frame_dig 2 // i: uint64
	intc 6 // 24
	<
	bz *for_2_end

	// contracts/OLink.algo.ts:104
	// shortcode = this.generateShortcode(hash, i)
	frame_dig 2 // i: uint64
	frame_dig 1 // hash: byte[32]
	callsub generateShortcode
	frame_bury 3 // shortcode: string

	// *if2_condition
	// contracts/OLink.algo.ts:105
	// this.linkMap(shortcode).exists
	frame_dig 3 // shortcode: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	box_len
	swap
	pop
	bz *if2_else

	// *if2_consequent
	// *if3_condition
	// contracts/OLink.algo.ts:106
	// this.linkMap(shortcode).value === url
	frame_dig 3 // shortcode: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	box_get

	// box value does not exist: this.linkMap(shortcode).value
	assert
	extract 2 0
	frame_dig -2 // url: string
	==
	bz *if3_end

	// *if3_consequent
	// contracts/OLink.algo.ts:107
	// errorMessage = 'Shortcode already exists: ' + shortcode
	pushbytes 0x53686f7274636f646520616c7265616479206578697374733a20 // "Shortcode already exists: "
	frame_dig 3 // shortcode: string
	concat
	frame_bury 4 // errorMessage: byte[]

	// contracts/OLink.algo.ts:108
	// assert(false, errorMessage)
	intc 1 // 0
	assert

*if3_end:
	b *if2_end

*if2_else:
	// contracts/OLink.algo.ts:111
	// this.linkMap(shortcode).value = url
	frame_dig 3 // shortcode: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	dup
	box_del
	pop
	frame_dig -2 // url: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	box_put

	// contracts/OLink.algo.ts:112
	// return shortcode;
	frame_dig 3 // shortcode: string
	b *createShortcode*return

*if2_end:

*for_2_continue:
	// contracts/OLink.algo.ts:103
	// i += 1
	frame_dig 2 // i: uint64
	intc 0 // 1
	+
	frame_bury 2 // i: uint64
	b *for_2

*for_2_end:
	// contracts/OLink.algo.ts:116
	// assert(false, 'Failed to create shortcode')
	intc 1 // 0

	// Failed to create shortcode
	assert

	// contracts/OLink.algo.ts:117
	// return '';
	bytec 0 //  ""

*createShortcode*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 4
	retsub

// createCustomShortcode(pay,axfer,string,string)string
*abi_route_createCustomShortcode:
	// The ABI return prefix
	bytec 3 // 0x151f7c75

	// url: string
	txna ApplicationArgs 2
	extract 2 0

	// shortcode: string
	txna ApplicationArgs 1
	extract 2 0

	// oraPayment: axfer
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 2 //  axfer
	==

	// argument 2 (oraPayment) for createCustomShortcode must be a axfer transaction
	assert

	// mbrPayment: pay
	txn GroupIndex
	pushint 2
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 3 (mbrPayment) for createCustomShortcode must be a pay transaction
	assert

	// execute createCustomShortcode(pay,axfer,string,string)string
	callsub createCustomShortcode
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// createCustomShortcode(mbrPayment: PayTxn, oraPayment: AssetTransferTxn, shortcode: string, url: string): string
//
// Called to generate a shortcode for a URL.
createCustomShortcode:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts/OLink.algo.ts:122
	// assert(!this.linkMap(shortcode).exists, 'Shortcode already exists')
	frame_dig -3 // shortcode: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	box_len
	swap
	pop
	!

	// Shortcode already exists
	assert

	// contracts/OLink.algo.ts:124
	// mbrPaymentAmount = 2500 + 400 * (url.length + shortcode.length + 4)
	intc 4 // 2500
	intc 3 // 400
	frame_dig -4 // url: string
	len
	frame_dig -3 // shortcode: string
	len
	+
	intc 2 // 4
	+
	*
	+
	frame_bury 0 // mbrPaymentAmount: uint64

	// contracts/OLink.algo.ts:126
	// verifyPayTxn(mbrPayment, { receiver: this.app.address, amount: mbrPaymentAmount })
	// verify receiver
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPayment","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Amount
	frame_dig 0 // mbrPaymentAmount: uint64
	==

	// transaction verification failed: {"txn":"mbrPayment","field":"amount","expected":"mbrPaymentAmount"}
	assert

	// contracts/OLink.algo.ts:127
	// verifyAssetTransferTxn(oraPayment, {
	//       assetReceiver: this.app.address,
	//       assetAmount: this.customLinkPrice.value,
	//       xferAsset: this.oraAsaId.value,
	//     })
	// verify assetReceiver
	frame_dig -2 // oraPayment: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"oraPayment","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify assetAmount
	frame_dig -2 // oraPayment: AssetTransferTxn
	gtxns AssetAmount
	bytec 4 //  "linkPrice"
	app_global_get
	==

	// transaction verification failed: {"txn":"oraPayment","field":"assetAmount","expected":"this.customLinkPrice.value"}
	assert

	// verify xferAsset
	frame_dig -2 // oraPayment: AssetTransferTxn
	gtxns XferAsset
	bytec 1 //  "oraAsaId"
	app_global_get
	==

	// transaction verification failed: {"txn":"oraPayment","field":"xferAsset","expected":"this.oraAsaId.value"}
	assert

	// contracts/OLink.algo.ts:133
	// this.linkMap(shortcode).value = url
	frame_dig -3 // shortcode: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	dup
	box_del
	pop
	frame_dig -4 // url: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	box_put

	// contracts/OLink.algo.ts:134
	// return shortcode;
	frame_dig -3 // shortcode: string

	// set the subroutine return value
	frame_bury 0
	retsub

// withdraw()void
*abi_route_withdraw:
	// execute withdraw()void
	callsub withdraw
	intc 0 // 1
	return

// withdraw(): void
withdraw:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts/OLink.algo.ts:138
	// verifyAppCallTxn(this.txn, { sender: this.manager.value })
	// verify sender
	txn Sender
	bytec 2 //  "manager"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.manager.value"}
	assert

	// contracts/OLink.algo.ts:140
	// contractBalance = this.app.address.assetBalance(this.oraAsaId.value)
	global CurrentApplicationAddress
	bytec 1 //  "oraAsaId"
	app_global_get
	asset_holding_get AssetBalance
	pop
	frame_bury 0 // contractBalance: uint64

	// contracts/OLink.algo.ts:142
	// assert(contractBalance > 0, 'No balance to withdraw')
	frame_dig 0 // contractBalance: uint64
	intc 1 // 0
	>

	// No balance to withdraw
	assert

	// contracts/OLink.algo.ts:144
	// sendAssetTransfer({
	//       sender: this.app.address,
	//       assetReceiver: this.txn.sender,
	//       assetAmount: contractBalance,
	//       xferAsset: this.oraAsaId.value,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/OLink.algo.ts:145
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/OLink.algo.ts:146
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/OLink.algo.ts:147
	// assetAmount: contractBalance
	frame_dig 0 // contractBalance: uint64
	itxn_field AssetAmount

	// contracts/OLink.algo.ts:148
	// xferAsset: this.oraAsaId.value
	bytec 1 //  "oraAsaId"
	app_global_get
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*create_NoOp:
	txn NumAppArgs
	bz *abi_route_createApplication
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x8bef050e // method "bootstrap(uint64,uint64)void"
	pushbytes 0xc9a1463a // method "updateCustomLinkCost(uint64,uint64)void"
	pushbytes 0xdfb13597 // method "resolveShortcode(string)string"
	pushbytes 0xc8be8761 // method "findShortcode(string)string"
	pushbytes 0x0f5d0a13 // method "createShortcode(pay,string)string"
	pushbytes 0x0eef4660 // method "createCustomShortcode(pay,axfer,string,string)string"
	pushbytes 0xb7355fd1 // method "withdraw()void"
	txna ApplicationArgs 0
	match *abi_route_bootstrap *abi_route_updateCustomLinkCost *abi_route_resolveShortcode *abi_route_findShortcode *abi_route_createShortcode *abi_route_createCustomShortcode *abi_route_withdraw

	// this contract does not implement the given ABI method for call NoOp
	err

*create_UpdateApplication:
	// this contract does not implement any ABI methods for UpdateApplication create
	err

*call_UpdateApplication:
	txn NumAppArgs
	bz *abi_route_updateApplication
	pushbytes 0x46f76533 // method "updateApplication()void"
	txna ApplicationArgs 0
	match *abi_route_updateApplication

	// this contract does not implement the given ABI method for call UpdateApplication
	err

*create_DeleteApplication:
	// this contract does not implement any ABI methods for DeleteApplication create
	err

*call_DeleteApplication:
	txn NumAppArgs
	bz *abi_route_deleteApplication
	pushbytes 0x2487c32c // method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err